<!DOCTYPE html>
<html lang="pt-BR" data-bs-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard de Separação de Cargas Otimizado</title>
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    
    <script src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>

    <style>
        :root {
            --dark-bg: #1a1d21;
            --dark-surface: #24282f;
            --dark-border: #3e444c;
            --dark-primary: #3677f5;
            --dark-primary-hover: #528eff;
            --dark-text-primary: #f8f9fa;
            --dark-text-secondary: #adb5bd;
        }

        body {
            background-color: var(--dark-bg);
            font-family: 'Inter', sans-serif;
        }

        /* --- TELA DE LOGIN REFORMULADA --- */
        #login-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            transition: opacity 0.5s ease;
            overflow: hidden;
        }

        #particles-js {
            position: absolute;
            width: 100%;
            height: 100%;
            z-index: -1;
            background-color: #1a1a1a;
        }

        .login-card {
            width: 100%;
            max-width: 420px;
            background-color: rgba(36, 40, 47, 0.75);
            backdrop-filter: blur(12px) saturate(150%);
            border: 1px solid rgba(255, 255, 255, 0.1);
            animation: fadeIn 0.8s ease-out;
        }

        .login-card .form-control {
            background-color: rgba(26, 29, 33, 0.8);
            border-color: var(--dark-border);
            color: var(--dark-text-primary);
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        .login-card .form-control:focus {
            background-color: rgba(26, 29, 33, 1);
            border-color: var(--dark-primary);
            box-shadow: 0 0 0 0.25rem rgba(54, 119, 245, 0.25);
        }

        .form-container {
            transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
        }
        .form-container.hidden { display: none; }
        .form-exit { animation: slideOut 0.3s forwards ease-in-out; }
        .form-enter { animation: slideIn 0.3s forwards ease-in-out; }

        .icon-container { animation: float 3s infinite ease-in-out; }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-8px); }
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: scale(0.95) translateY(10px); }
            to { opacity: 1; transform: scale(1) translateY(0); }
        }
        @keyframes slideIn {
            from { opacity: 0; transform: translateX(30px); }
            to { opacity: 1; transform: translateX(0); }
        }
        @keyframes slideOut {
            from { opacity: 1; transform: translateX(0); }
            to { opacity: 0; transform: translateX(-30px); }
        }
        
        #auth-message { min-height: 24px; }

        /* --- DASHBOARD REFORMULADO --- */
        #dashboard-content {
            animation: fadeIn 0.6s ease-in-out;
        }
        
        .card {
            background-color: var(--dark-surface);
            border: 1px solid var(--dark-border);
            border-radius: 0.75rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transition: border-color 0.2s ease-in-out;
        }
        
        .card:hover {
            border-color: #4a515a;
        }

        .card-header {
            background-color: rgba(0,0,0,0.2);
            border-bottom: 1px solid var(--dark-border);
            font-weight: 500;
        }
        
        .btn-primary { background-color: var(--dark-primary); border-color: var(--dark-primary); }
        .btn-primary:hover { background-color: var(--dark-primary-hover); border-color: var(--dark-primary-hover); }

        .accordion-button {
            background-color: #343a40;
            color: var(--dark-text-primary);
        }

        .accordion-button:not(.collapsed) {
            background-color: var(--dark-primary);
            color: white;
            box-shadow: inset 0 -1px 0 rgba(0,0,0,.125);
        }
        
        #controls-accordion .accordion-button {
            background-color: var(--dark-surface);
        }

        .accordion-body { background-color: var(--dark-surface); }
        
        .table {
            --bs-table-bg: var(--dark-surface);
            --bs-table-striped-bg: rgba(255, 255, 255, 0.03);
            --bs-table-hover-bg: rgba(255, 255, 255, 0.06);
            --bs-table-border-color: var(--dark-border);
        }

        thead th {
            background-color: #2b3035;
            font-weight: 500;
        }
        
        tbody tr { cursor: pointer; }

        .nav-tabs .nav-link {
            color: var(--dark-text-secondary);
            border: none;
            border-bottom: 2px solid transparent;
        }
        .nav-tabs .nav-link.active, .nav-tabs .nav-item.show .nav-link {
            color: var(--dark-primary);
            background-color: transparent;
            border-color: var(--dark-primary);
            font-weight: 500;
        }
        .tab-content {
             background-color: rgba(0,0,0,0.1);
             border: 1px solid var(--dark-border);
             border-top: none;
             border-radius: 0 0 0.5rem 0.5rem;
        }

        #drop-zone-text {
            border: 2px dashed var(--dark-border);
            background-color: #2b3035;
            transition: border-color .15s ease-in-out, background-color .15s ease-in-out;
        }
        #drop-zone-text:hover {
             background-color: #343a40;
        }
        #drop-zone.border-primary #drop-zone-text {
            border-color: var(--dark-primary);
            box-shadow: 0 0 10px rgba(54, 119, 245, 0.3);
        }

        tr.client-highlight > td {
            background-color: #49491c !important;
        }
        
        .drop-zone-card.drag-over {
            border-color: var(--dark-primary);
            border-width: 2px;
            box-shadow: 0 0 15px rgba(54, 119, 245, 0.5);
        }

        /* --- AJUSTE DE ROLAGEM (ALTERADO) --- */
        /* Remove a rolagem interna do painel Mesa de Trabalho e do painel Pedidos Disponíveis. */
        .workspace-tab-pane, #pedidos-disponiveis-card .card-body {
            max-height: none;
            overflow-y: visible;
        }

        .status-message { min-height: 24px; }

        /* --- ESTILOS DE IMPRESSÃO (Mantidos) --- */
        @media print {
            body { background-color: #fff; color: #000; -webkit-print-color-adjust: exact; print-color-adjust: exact; }
            #login-container, #dashboard-content .no-print { display: none !important; }
            .container, .card, .accordion-item, .accordion-body, .card-header { background-color: #fff !important; color: #000 !important; border: none !important; box-shadow: none !important; }
            .d-flex.align-items-center.mb-3, .card.p-3.mb-4.shadow-sm, button, .status-message, .card-subtitle, .accordion-button.collapsed, .accordion-collapse.collapse, .nav-tabs, .tab-content, #controls-accordion { display: none !important; }
            .table-responsive { overflow: visible !important; }
            table, th, td { border: 1px solid #dee2e6 !important; color: #000 !important; }
            h1, h2, h3, h4, h5 { color: #000 !important; margin-top: 1rem; margin-bottom: 0.5rem; }
            .accordion-collapse, .tab-pane { display: block !important; padding: 0 !important; }
            .accordion-button { display: block !important; background-color: #f8f9fa !important; color: #000 !important; border: 1px solid #dee2e6 !important; margin-bottom: 0.5rem; }
            .accordion-button strong, .accordion-button .badge { color: #000 !important; }
            .bg-warning { background-color: #ffc107 !important; color: black !important; }
            .bg-success, .bg-primary, .bg-danger { color: white !important; }
            .text-danger { color: #dc3545 !important; }
        }
    </style>
</head>
<body>
    <div id="login-container">
        <div id="particles-js"></div>
        <div class="card p-4 shadow-lg login-card">
            <div class="text-center mb-4 icon-container">
                 <i class="bi bi-truck-front-fill display-3 text-primary"></i>
            </div>

            <div id="auth-message" class="text-center mb-3"></div>
            
            <div id="login-form-container" class="form-container">
                <div class="text-center mb-4">
                    <h4 class="mb-1">Bem-vindo de volta!</h4>
                    <p class="text-body-secondary small">Acesse o dashboard para continuar</p>
                </div>
                <form id="login-form">
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" required autocomplete="email">
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Senha</label>
                        <input type="password" class="form-control" id="password" required autocomplete="current-password">
                    </div>
                    <button type="submit" class="btn btn-primary w-100 py-2 mt-2">
                        <span class="button-text">Entrar</span>
                        <div class="spinner-border spinner-border-sm" role="status" style="display: none;"></div>
                    </button>
                </form>
                <p class="text-center small mt-3 mb-0">
                    Não tem uma conta? <a href="#" class="auth-toggle-link" id="toggle-to-signup">Cadastre-se</a>
                </p>
            </div>

            <div id="signup-form-container" class="form-container hidden">
                 <div class="text-center mb-4">
                    <h4 class="mb-1">Crie sua Conta</h4>
                    <p class="text-body-secondary small">Rápido e fácil</p>
                </div>
                <form id="signup-form">
                    <div class="mb-3">
                        <label for="signup-email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="signup-email" required autocomplete="email">
                    </div>
                    <div class="mb-3">
                        <label for="signup-password" class="form-label">Senha (mínimo 6 caracteres)</label>
                        <input type="password" class="form-control" id="signup-password" required autocomplete="new-password">
                    </div>
                    <button type="submit" class="btn btn-success w-100 py-2 mt-2">
                        <span class="button-text">Criar Conta</span>
                        <div class="spinner-border spinner-border-sm" role="status" style="display: none;"></div>
                    </button>
                </form>
                 <p class="text-center small mt-3 mb-0">
                    Já tem uma conta? <a href="#" class="auth-toggle-link" id="toggle-to-login">Faça login</a>
                </p>
            </div>
        </div>
    </div>
    
    <div id="dashboard-content" style="display: none;">
        <div class="container mt-4 mb-4">
             <div class="d-flex flex-wrap justify-content-between align-items-center mb-4 pb-3 border-bottom border-secondary">
                <div class="d-flex align-items-center mb-2 mb-md-0">
                    <i class="bi bi-truck-front-fill display-4 me-3 text-primary"></i>
                    <h1 class="mb-0 h3">Dashboard de Separação de Cargas</h1>
                </div>
                <div class="d-flex align-items-center no-print">
                    <div id="user-info" class="me-3 text-body-secondary small text-nowrap"></div>
                    <div class="btn-group">
                        <button class="btn btn-outline-secondary" id="limparResultadosBtn"><i class="bi bi-eraser-fill me-1"></i>Limpar Tudo</button>
                        <button class="btn btn-outline-danger" id="logout-button"><i class="bi bi-box-arrow-right me-1"></i>Sair</button>
                    </div>
                </div>
            </div>

            <div class="accordion mb-4 no-print" id="controls-accordion">
                <div class="accordion-item" style="background-color: var(--dark-surface); border: 1px solid var(--dark-border); border-radius: 0.75rem;">
                    <h2 class="accordion-header">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseControls">
                            <i class="bi bi-gear-wide-connected me-2"></i> Painel de Controles e Configurações (Clique para expandir)
                        </button>
                    </h2>
                    <div id="collapseControls" class="accordion-collapse collapse" data-bs-parent="#controls-accordion">
                        <div class="accordion-body">
                            <div class="card mb-4" id="drop-zone">
                                <div class="card-header"><i class="bi bi-file-earmark-arrow-up-fill me-2"></i>1. Processar Planilha</div>
                                <div class="card-body">
                                    <div class="row g-3 align-items-center">
                                        <div class="col-md-4">
                                            <label for="fileInput" class="form-label fw-bold">Arquivo:</label>
                                            <input class="form-control" type="file" id="fileInput" accept=".xlsx, .xls, .csv" style="display: none;">
                                            <div id="drop-zone-text" class="text-center p-4 rounded-3" role="button" onclick="document.getElementById('fileInput').click()">
                                                <i class="bi bi-file-earmark-spreadsheet-fill fs-2 text-secondary"></i>
                                                <p class="text-secondary mt-2">Arraste o arquivo aqui ou</p>
                                                <button type="button" class="btn btn-secondary btn-sm" onclick="event.stopPropagation(); document.getElementById('fileInput').click()"><i class="bi bi-folder2-open me-2"></i>Selecionar Arquivo</button>
                                            </div>
                                        </div>
                                        <div class="col-md-5">
                                            <label class="form-label fw-bold">Faixa de Rotas (Opcional):</label>
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="bi bi-signpost-split-fill"></i></span>
                                                <input type="text" class="form-control" id="rotaInicialInput" placeholder="Rota Inicial">
                                                <input type="text" class="form-control" id="rotaFinalInput" placeholder="Rota Final">
                                            </div>
                                            <div class="form-check form-switch mt-2">
                                                <input class="form-check-input" type="checkbox" role="switch" id="autoProcessCheckbox">
                                                <label class="form-check-label" for="autoProcessCheckbox">Processar automaticamente</label>
                                            </div>
                                        </div>
                                        <div class="col-md-3 align-self-end">
                                            <button class="btn btn-primary w-100 py-2" id="processarBtn" onclick="processar()" disabled><i class="bi bi-gear-fill me-2"></i>Processar Cargas</button>
                                        </div>
                                    </div>
                                    <div id="status" class="mt-3 status-message"></div>
                                </div>
                            </div>
                            <div class="card mb-4">
                                <div class="card-header"><h2 class="card-title h5 mb-0"><i class="bi bi-sliders me-2"></i>2. Configurações de Veículos</h2></div>
                                <div class="card-body">
                                     <div class="row g-3 mb-3 border-bottom pb-3 border-secondary">
                                         <div class="col-md-12"><strong class="text-success">Fiorino</strong></div>
                                         <div class="col-md-3"><label for="fiorinoMinCapacity" class="form-label">Peso Mín (kg)</label><input type="number" class="form-control config-input" id="fiorinoMinCapacity" value="300" step="10"></div>
                                         <div class="col-md-3"><label for="fiorinoMaxCapacity" class="form-label">Peso Pref. (kg)</label><input type="number" class="form-control config-input" id="fiorinoMaxCapacity" value="500" step="10"></div>
                                         <div class="col-md-3"><label for="fiorinoCubage" class="form-label">Cubagem Pref. (m³)</label><input type="number" class="form-control config-input" id="fiorinoCubage" value="1.5" step="0.1"></div>
                                         <div class="col-md-3 d-flex align-items-end"><button class="btn btn-secondary w-100" id="resetFiorino">Reset</button></div>
                                         <div class="col-md-3"></div>
                                         <div class="col-md-3"><label for="fiorinoHardMaxCapacity" class="form-label fw-bold">Peso Máx Final (kg)</label><input type="number" class="form-control config-input" id="fiorinoHardMaxCapacity" value="560" step="10"></div>
                                         <div class="col-md-3"><label for="fiorinoHardCubage" class="form-label fw-bold">Cubagem Máx Final (m³)</label><input type="number" class="form-control config-input" id="fiorinoHardCubage" value="1.7" step="0.1"></div>
                                     </div>
                                    <div class="row g-3 mb-3 border-bottom pb-3 border-secondary">
                                         <div class="col-md-12"><strong class="text-primary">Van</strong></div>
                                         <div class="col-md-3"><label for="vanMinCapacity" class="form-label">Peso Mín (kg)</label><input type="number" class="form-control config-input" id="vanMinCapacity" value="1100" step="10"></div>
                                         <div class="col-md-3"><label for="vanMaxCapacity" class="form-label">Peso Pref. (kg)</label><input type="number" class="form-control config-input" id="vanMaxCapacity" value="1560" step="10"></div>
                                         <div class="col-md-3"><label for="vanCubage" class="form-label">Cubagem Pref. (m³)</label><input type="number" class="form-control config-input" id="vanCubage" value="5.0" step="0.1"></div>
                                         <div class="col-md-3 d-flex align-items-end"><button class="btn btn-secondary w-100" id="resetVan">Reset</button></div>
                                         <div class="col-md-3"></div>
                                         <div class="col-md-3"><label for="vanHardMaxCapacity" class="form-label fw-bold">Peso Máx Final (kg)</label><input type="number" class="form-control config-input" id="vanHardMaxCapacity" value="1600" step="10"></div>
                                         <div class="col-md-3"><label for="vanHardCubage" class="form-label fw-bold">Cubagem Máx Final (m³)</label><input type="number" class="form-control config-input" id="vanHardCubage" value="5.6" step="0.1"></div>
                                     </div>
                                    <div class="row g-3 mb-3 border-bottom pb-3 border-secondary">
                                         <div class="col-md-12"><strong class="text-warning">3/4</strong></div>
                                         <div class="col-md-3"><label for="tresQuartosMinCapacity" class="form-label">Peso Mín (kg)</label><input type="number" class="form-control config-input" id="tresQuartosMinCapacity" value="2300" step="10"></div>
                                         <div class="col-md-3"><label for="tresQuartosMaxCapacity" class="form-label">Peso Máx (kg)</label><input type="number" class="form-control config-input" id="tresQuartosMaxCapacity" value="4100" step="10"></div>
                                         <div class="col-md-3"><label for="tresQuartosCubage" class="form-label">Cubagem Máx (m³)</label><input type="number" class="form-control config-input" id="tresQuartosCubage" value="15.0" step="0.1"></div>
                                         <div class="col-md-3 d-flex align-items-end"><button class="btn btn-secondary w-100" id="resetTresQuartos">Reset</button></div>
                                     </div>
                                    <div class="row g-3">
                                         <div class="col-md-12"><strong>Toco</strong></div>
                                         <div class="col-md-3"><label for="tocoMinCapacity" class="form-label">Peso Mín (kg)</label><input type="number" class="form-control config-input" id="tocoMinCapacity" value="5000" step="10"></div>
                                         <div class="col-md-3"><label for="tocoMaxCapacity" class="form-label">Peso Máx (kg)</label><input type="number" class="form-control config-input" id="tocoMaxCapacity" value="8500" step="10"></div>
                                         <div class="col-md-3"><label for="tocoCubage" class="form-label">Cubagem Máx (m³)</label><input type="number" class="form-control config-input" id="tocoCubage" value="30.0" step="0.1"></div>
                                         <div class="col-md-3 d-flex align-items-end"><button class="btn btn-secondary w-100" id="resetToco">Reset</button></div>
                                     </div>
                                    <div class="mt-4 d-flex justify-content-end"><button class="btn btn-success me-2" id="saveConfig"><i class="bi bi-check-circle-fill me-2"></i>Salvar Tudo</button><button class="btn btn-danger" id="resetAllConfigs"><i class="bi bi-arrow-clockwise me-2"></i>Resetar Tudo</button></div>
                                    <div id="configStatus" class="mt-2 status-message text-end"></div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-4 mb-md-0">
                                    <div class="card h-100">
                                        <div class="card-header"><h2 class="card-title h5 mb-0"><i class="bi bi-slash-circle-fill me-2"></i>3. Bloqueio Manual</h2></div>
                                        <div class="card-body d-flex flex-column">
                                            <label for="bloquearPedidoInput" class="form-label">Número do Pedido a Bloquear:</label>
                                            <div class="input-group mb-3"><input type="text" class="form-control" id="bloquearPedidoInput" placeholder="Digite o número..."><button class="btn btn-outline-danger" type="button" onclick="bloquearPedido()">Bloquear</button></div>
                                            <label class="form-label mt-2">Pedidos Bloqueados:</label>
                                            <div id="lista-pedidos-bloqueados" class="p-2 border rounded border-secondary flex-grow-1" style="background-color: var(--dark-bg);"><span class="text-muted">Nenhum.</span></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                     <div class="card h-100">
                                         <div class="card-header"><h2 class="card-title h5 mb-0"><i class="bi bi-star-fill me-2"></i>4. Carga Especial</h2></div>
                                          <div class="card-body d-flex flex-column">
                                            <div class="flex-grow-1">
                                                <label for="pedidosEspeciaisInput" class="form-label">Números dos Pedidos (um por linha):</label>
                                                <textarea class="form-control" id="pedidosEspeciaisInput" rows="5" placeholder="Cole os números aqui..."></textarea>
                                            </div>
                                            <button class="btn btn-info w-100 mt-3" type="button" onclick="montarCargaEspecial()"><i class="bi bi-magic me-2"></i>Montar Carga Especial</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div id="resultado-carga-especial" class="mb-4"></div>
            <div id="card-resumo-geral-container" class="mb-4" style="display: none;"></div>

            <div class="row">
                <div class="col-lg-8 mb-4">
                    <div class="card h-100">
                        <div class="card-header">
                            <h2 class="card-title h5 mb-0"><i class="bi bi-tools me-2"></i>Mesa de Trabalho: Montagem de Cargas</h2>
                        </div>
                        <div class="card-body p-0">
                             <ul class="nav nav-tabs nav-fill px-3 pt-2" id="vehicleTabs" role="tablist">
                                <li class="nav-item" role="presentation"><button class="nav-link active" id="fiorino-tab" data-bs-toggle="tab" data-bs-target="#fiorino-tab-pane" type="button" role="tab"><i class="bi bi-box-seam-fill me-2"></i>Fiorino</button></li>
                                <li class="nav-item" role="presentation"><button class="nav-link" id="van-tab" data-bs-toggle="tab" data-bs-target="#van-tab-pane" type="button" role="tab"><i class="bi bi-truck-front-fill me-2"></i>Van</button></li>
                                <li class="nav-item" role="presentation"><button class="nav-link" id="tres-quartos-tab" data-bs-toggle="tab" data-bs-target="#tres-quartos-tab-pane" type="button" role="tab"><i class="bi bi-truck-flatbed me-2"></i>3/4</button></li>
                            </ul>
                            <div class="tab-content" id="vehicleTabsContent">
                                <div class="tab-pane fade show active p-3 workspace-tab-pane" id="fiorino-tab-pane" role="tabpanel">
                                    <div class="d-flex justify-content-between align-items-center mb-3 no-print">
                                        <p class="card-subtitle text-body-secondary small mb-0">Selecione uma rota para montar as Fiorinos.</p>
                                        <button class="btn btn-sm btn-outline-light" onclick="imprimirCargasGeneric('resultado-fiorino-geral', 'Cargas de Fiorino')"><i class="bi bi-printer-fill me-1"></i>Imprimir Cargas</button>
                                    </div>
                                    <div class="mb-3 no-print" id="botoes-fiorino"><p class="text-muted">Processe um arquivo para ver as rotas disponíveis.</p></div>
                                    <hr class="no-print"><div id="resultado-fiorino-geral" class="mt-3"></div>
                                </div>
                                <div class="tab-pane fade p-3 workspace-tab-pane" id="van-tab-pane" role="tabpanel">
                                    <div class="d-flex justify-content-between align-items-center mb-3 no-print">
                                        <p class="card-subtitle text-body-secondary small mb-0">Selecione uma rota para montar as Vans.</p>
                                        <button class="btn btn-sm btn-outline-light" onclick="imprimirCargasGeneric('resultado-van-geral', 'Cargas de Van')"><i class="bi bi-printer-fill me-1"></i>Imprimir Cargas</button>
                                    </div>
                                    <div class="mb-3 no-print" id="botoes-van"><p class="text-muted">Processe um arquivo para ver as rotas disponíveis.</p></div>
                                    <hr class="no-print"><div id="resultado-van-geral" class="mt-3"></div>
                                </div>
                                <div class="tab-pane fade p-3 workspace-tab-pane" id="tres-quartos-tab-pane" role="tabpanel">
                                    <div class="d-flex justify-content-between align-items-center mb-3 no-print">
                                        <p class="card-subtitle text-body-secondary small mb-0">Selecione uma rota para montar as cargas 3/4.</p>
                                        <button class="btn btn-sm btn-outline-light" onclick="imprimirCargasGeneric('resultado-34-geral', 'Cargas de 3/4')"><i class="bi bi-printer-fill me-1"></i>Imprimir Cargas</button>
                                    </div>
                                    <div class="mb-3 no-print" id="botoes-34"><p class="text-muted">Processe um arquivo para ver as rotas disponíveis.</p></div>
                                    <hr class="no-print"><div id="resultado-34-geral" class="mt-3"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4 mb-4">
                    <div class="card" id="pedidos-disponiveis-card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                           <h2 class="card-title h5 mb-0"><i class="bi bi-list-check me-2"></i>Pedidos Disponíveis</h2>
                            <div class="no-print"><button class="btn btn-sm btn-outline-danger" onclick="exportarPedidosAtrasados()"><i class="bi bi-file-earmark-excel-fill me-1"></i>Atrasados</button></div>
                        </div>
                       <div class="card-body">
                           <p class="card-subtitle mb-3 text-body-secondary small">Pedidos sem CF numérico, agrupados por rota.</p>
                           <div class="input-group mb-3 no-print"><input type="text" id="pedidoSearchInput" class="form-control" placeholder="Buscar por Nº do Pedido..."><button class="btn btn-outline-secondary" type="button" onclick="buscarPedido()"><i class="bi bi-search"></i></button></div>
                           <div id="search-result" class="mb-3"></div>
                           <div id="resultado-geral"></div>
                       </div>
                    </div>
                </div>
            </div>

            <hr class="my-4">
            <h3 class="mb-3">Resultados Adicionais da Análise</h3>
            
            <div class="card mb-4 border-danger">
                <div class="card-header bg-danger-subtle text-danger-emphasis"><h2 class="card-title h5 mb-0"><i class="bi bi-slash-circle-fill me-2"></i>Pedidos Bloqueados Manualmente</h2></div>
                <div class="card-body"><div id="resultado-bloqueados"></div></div>
            </div>

            <div class="card mb-4 border-warning">
                <div class="card-header bg-warning-subtle text-warning-emphasis"><h2 class="card-title h5 mb-0"><i class="bi bi-sign-turn-right-fill me-2"></i>Pedidos da Rota 1 para Alteração</h2></div>
                <div class="card-body"><div id="resultado-rota1"></div></div>
            </div>

            <div class="card mb-4">
                <div class="card-header"><h2 class="card-title h5 mb-0"><i class="bi bi-lightning-charge-fill me-2"></i>Cargas 3/4 (Formadas Automaticamente)</h2></div>
                <div class="card-body"><div id="resultado-tres-quartos"></div></div>
            </div>

            <div class="card mb-4">
                <div class="card-header"><h2 class="card-title h5 mb-0"><i class="bi bi-inboxes-fill me-2"></i>Cargas "Toco"</h2></div>
                <div class="card-body"><div id="resultado-toco"></div></div>
            </div>
            
            <div class="card mb-4 border-secondary">
                <div class="card-header bg-secondary-subtle text-secondary-emphasis"><h2 class="card-title h5 mb-0"><i class="bi bi-funnel-fill me-2"></i>Pedidos Filtrados (CF Numérico ou Bloqueio por Regra)</h2></div>
                <div class="card-body"><div id="resultado-cf-numerico"></div></div>
            </div>
        </div>
    </div>

    <script>
        // INÍCIO DO SCRIPT DE PARTÍCULAS PARA O LOGIN
        document.addEventListener('DOMContentLoaded', function () {
            if (document.getElementById('particles-js')) {
                particlesJS('particles-js', {
                    "particles": { "number": { "value": 60, "density": { "enable": true, "value_area": 800 } }, "color": { "value": "#4a515a" }, "shape": { "type": "circle" }, "opacity": { "value": 0.5, "random": true, "anim": { "enable": true, "speed": 1, "opacity_min": 0.1, "sync": false } }, "size": { "value": 3, "random": true }, "line_linked": { "enable": true, "distance": 150, "color": "#4a515a", "opacity": 0.4, "width": 1 }, "move": { "enable": true, "speed": 2, "direction": "none", "out_mode": "out" } }, "interactivity": { "detect_on": "canvas", "events": { "onhover": { "enable": true, "mode": "grab" }, "onclick": { "enable": true, "mode": "push" }, "resize": true }, "modes": { "grab": { "distance": 140, "line_linked": { "opacity": 1 } } } }, "retina_detect": true
                });
            }
        });
        // FIM DO SCRIPT DE PARTÍCULAS
    </script>
    
    <script>
        const SUPABASE_URL = 'https://mwfsitvoshwipmvgcdmc.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im13ZnNpdHZvc2h3aXBtdmdjZG1jIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg3NTY3OTIsImV4cCI6MjA3NDMzMjc5Mn0.DvXQ_HMMnJZyQh17C6N426r1X9AeYjIMpXVbTRspFq0';
        const supabaseClient = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        const agendamentoClientCodes = new Set([
            '1398', '1494', '4639', '4872', '5546', '6896', 'D11238', '17163', '19622', '20350', '22545', '23556', '23761', '24465', '29302', '32462', '32831', '32851', '32869', '32905', '33039', '33046', '33047', '33107', '33388', '33392', '33400', '33401', '33403', '33406', '33420', '33494', '33676', '33762', '33818', '33859', '33907', '33971', '34011', '34096', '34167', '34425', '34511', '34810', '34981', '35050', '35054', '35798', '36025', '36580', '36792', '36853', '36945', '37101', '37589', '37634', '38207', '38448', '38482', '38564', '38681', '38735', 'D38896', '39081', '39177', '39620', '40144', '40442', '40702', '40844', '41233', '42200', '42765', '47244', '47253', '47349', '50151', '50816', '51993', '52780', '53134', '58645', '60900', '61182', '61315', '61316', '61317', '61318', '61324', '63080', '63500', '63705', '64288', '66590', '67660', '67884', '69281', '69286', '69318', '70968', '71659', '73847', '76019', '76580', '77475', '77520', '78895', '79838', '80727', '81353', 'DB3183', '83184', '83634', '85534', 'DB6159', '86350', '86641', '89073', '89151', '90373', '92017', '95092', '95660', '96758', '98227', '99268', '100087', '101246', '101253', '101346', '103518', '105394', '106198', '109288', '110023', '110894', '111145', '111154', '111302', '112207', '112670', '117028', '117123', '120423', '120455', '120473', '120533', '121747', '122155', '122785', '123815', '124320', '125228', '126430', '131476', '132397', '133916', '135395', '135928', '136086', '136260', '137919', '138825', '139013', '139329', '139611', '143102', '44192', '144457', '145014', '145237', '145322', '146644', '146988', '148071', '149598', '150503', '151981', '152601', '152835', '152925', '153289', '154423', '154778', '154808', '155177', '155313', '155368', '155419', '155475', '155823', '155888', '156009', '156585', '156696', '157403', '158235', '159168', '160382', '160982', '161737', '162499', '162789', '163234', '163382', '163458', '164721', '164779', '164780', '164924', '165512', '166195', '166337', '166353', '166468', '166469', '167353', '167810', '167819', '168464', '169863', '169971', '170219', '170220', '170516', '171147', '171160', '171191', '171200', '171320', '171529', '171642', '171863', '172270', '172490', '172656', '172859', '173621', '173964', '173977', '174249', '174593', '174662', '174901', '175365', '175425', '175762', '175767', '175783', '176166', '176278', '176453', '176747', '177327', '177488', '177529', '177883', '177951', '177995', '178255', '178377', '178666', '179104', '179510', '179542', '179690', '180028', '180269', '180342', '180427', '180472', '180494', '180594', '180772', '181012', '181052', '181179', '182349', '182885', '182901', '183011', '183016', '183046', '183048', '183069', '183070', '183091', '183093', '183477', '183676', '183787', '184011', '184038', '189677', '190163', '190241', '190687', '190733', '191148', '191149', '191191', '191902', '191972', '192138', '192369', '192638', '192713', '193211', '193445', '193509', '194432', '194508', '194750', '194751', '194821', '194831', '195287', '195338', '195446', '196084', '196118', '196405', '196446', '196784', '197168', '197249', '197983', '198187', '198438', '198747', '198796', '198895', '198907', '198908', '199172', '199615', '199625', '199650', '199651', '199713', '199733', '199927', '199991', '200091', '200194', '200239', '200253', '200382', '200404', '200597', '200917', '201294', '201754', '201853', '201936', '201948', '201956', '201958', '201961', '201974', '202022', '202187', '202199', '202714', '203072', '203093', '203201', '203435', '203436', '203451', '203512', '203769', '204895', '204910', '204911', '204913', '204914', '204915', '204917', '204971', '204979', '205108', '205220', '205744', '205803', '206116', '206163', '206208', '206294', '206380', '206628', '206730', '206731', '206994', '207024', '207029', '207403', '207689', '207902', '208489', '208613', '208622', '208741', '208822', '208844', '208853', '208922', '209002', '209004', '209248', '209281', '209321', '209322', '209684', '210124', '210230', '210490', '210747', '210759', '210819', '210852', '211059', '211110', '211276', '211277', '211279', '211332', '211411', '212401', '212417', '212573', '212900', '213188', '213189', '213190', '213202', '213203', '213242', '213442', '213454', '213855', '213909', '213910', '213967', '214046', '214150', '214387', '214433', '214442', '214594', '214746', '215022', '215116', '215160', '215161', '215493', '215494', '215651', '215687', '215733', '215777', '215942', '216112', '216393', '216400', '216630', '216684', '217190', '217283', '217310', '217343', '217545', '217605', '217828', '217871', '217872', '217877', '217949', '217965', '218169', '218196', '218383', '218578', '218580', '218640', '218820', '218845', '219539', '219698', '219715', '219884', '220158', '220183', '220645', '220950', '221023', '221248', '221251', '222164', '222165', '223025', '223379', '223525', '223703', '223727', '223877', '223899', '223900', '223954', '224956', '224957', '224958', '224959', '224961', '224962', '225112', '225408', '225449', '225904', '226903', '226939', '227190', '227387', '228589', '228693', '228695'
        ]);

        function normalizeClientId(id) {
            if (id === null || typeof id === 'undefined') return '';
            return String(id).trim().replace(/^0+/, '');
        }

        function checkAgendamento(pedido) {
            const normalizedCode = normalizeClientId(pedido.Cliente);
            pedido.Agendamento = agendamentoClientCodes.has(normalizedCode) ? 'Sim' : 'Não';
        }
        
        let planilhaData = [];
        let originalColumnHeaders = [];
        let pedidosGeraisAtuais = [];
        let gruposToco = {};
        let pedidosComCFNumericoIsolado = [];
        let pedidosPrioritarios = [];
        let pedidosBloqueados = new Set();
        let pedidosEspeciaisProcessados = new Set();
        let rota1SemCarga = [];
        let tocoPedidoIds = new Set();
        let currentLeftoversForPrinting = [];
        let activeLoads = {};
        let manualLoadInProgress = null;


        const defaultConfigs = {
            fiorinoMinCapacity: 300, fiorinoMaxCapacity: 500, fiorinoCubage: 1.5, fiorinoHardMaxCapacity: 560, fiorinoHardCubage: 1.7,
            vanMinCapacity: 1100, vanMaxCapacity: 1560, vanCubage: 5.0, vanHardMaxCapacity: 1600, vanHardCubage: 5.6,
            tresQuartosMinCapacity: 2300, tresQuartosMaxCapacity: 4100, tresQuartosCubage: 15.0,
            tocoMinCapacity: 5000, tocoMaxCapacity: 8500, tocoCubage: 30.0
        };
        
        const CONFIG_ID = 'default_config';

        async function saveConfigurations() {
            const configStatus = document.getElementById('configStatus');
            configStatus.innerHTML = '<p class="text-info">Salvando configurações no banco de dados...</p>';

            try {
                const configs = {};
                Object.keys(defaultConfigs).forEach(key => {
                    const element = document.getElementById(key);
                    if (element) {
                        configs[key] = parseFloat(element.value);
                    }
                });
                
                configs.id = CONFIG_ID; 

                const { error } = await supabaseClient
                    .from('configuracoes_veiculos')
                    .upsert(configs, { onConflict: 'id' });

                if (error) {
                    throw error;
                }

                configStatus.innerHTML = '<p class="text-success">Configurações salvas no banco de dados com sucesso!</p>';
                setTimeout(() => { configStatus.innerHTML = ''; }, 3000);
            } catch (error) {
                console.error("Erro ao salvar no Supabase:", error);
                configStatus.innerHTML = `<p class="text-danger">Erro ao salvar as configurações: ${error.message}</p>`;
            }
        }

        async function loadConfigurations() {
            const configStatus = document.getElementById('configStatus');
            configStatus.innerHTML = '<p class="text-info">Carregando configurações do banco de dados...</p>';

            try {
                const { data, error } = await supabaseClient
                    .from('configuracoes_veiculos')
                    .select('*')
                    .eq('id', CONFIG_ID)
                    .single();

                if (error && error.code !== 'PGRST116') { // PGRST116: no rows found
                    throw error;
                }

                const configs = data ? data : defaultConfigs;
                
                Object.keys(configs).forEach(key => {
                    const element = document.getElementById(key);
                    if (element) {
                        element.value = configs[key];
                    }
                });
                configStatus.innerHTML = '<p class="text-success">Configurações carregadas!</p>';
                setTimeout(() => { configStatus.innerHTML = ''; }, 2000);

            } catch (error) {
                console.error("Erro ao carregar do Supabase:", error);
                configStatus.innerHTML = `<p class="text-warning">Não foi possível carregar configurações. Usando valores padrão.</p>`;
                Object.keys(defaultConfigs).forEach(key => {
                    const element = document.getElementById(key);
                    if (element) { element.value = defaultConfigs[key]; }
                });
            }
        }
        
        function resetFiorino() {
            document.getElementById('fiorinoMinCapacity').value = defaultConfigs.fiorinoMinCapacity;
            document.getElementById('fiorinoMaxCapacity').value = defaultConfigs.fiorinoMaxCapacity;
            document.getElementById('fiorinoCubage').value = defaultConfigs.fiorinoCubage;
            document.getElementById('fiorinoHardMaxCapacity').value = defaultConfigs.fiorinoHardMaxCapacity;
            document.getElementById('fiorinoHardCubage').value = defaultConfigs.fiorinoHardCubage;
            saveConfigurations();
        }
        function resetVan() {
            document.getElementById('vanMinCapacity').value = defaultConfigs.vanMinCapacity;
            document.getElementById('vanMaxCapacity').value = defaultConfigs.vanMaxCapacity;
            document.getElementById('vanCubage').value = defaultConfigs.vanCubage;
            document.getElementById('vanHardMaxCapacity').value = defaultConfigs.vanHardMaxCapacity;
            document.getElementById('vanHardCubage').value = defaultConfigs.vanHardCubage;
            saveConfigurations();
        }
        function resetTresQuartos() {
            document.getElementById('tresQuartosMinCapacity').value = defaultConfigs.tresQuartosMinCapacity;
            document.getElementById('tresQuartosMaxCapacity').value = defaultConfigs.tresQuartosMaxCapacity;
            document.getElementById('tresQuartosCubage').value = defaultConfigs.tresQuartosCubage;
            saveConfigurations();
        }
        function resetToco() {
            document.getElementById('tocoMinCapacity').value = defaultConfigs.tocoMinCapacity;
            document.getElementById('tocoMaxCapacity').value = defaultConfigs.tocoMaxCapacity;
            document.getElementById('tocoCubage').value = defaultConfigs.tocoCubage;
            saveConfigurations();
        }
        function resetAll() {
            Object.keys(defaultConfigs).forEach(key => { 
                const element = document.getElementById(key);
                if(element) element.value = defaultConfigs[key]; 
            });
            saveConfigurations();
        }
        
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                await loadConfigurations(); 
            } catch (e) {
                console.error("Falha crítica ao carregar configurações, listeners ainda serão ativados.", e);
            }

            document.getElementById('saveConfig').addEventListener('click', saveConfigurations);
            document.getElementById('resetFiorino').addEventListener('click', resetFiorino);
            document.getElementById('resetVan').addEventListener('click', resetVan);
            document.getElementById('resetTresQuartos').addEventListener('click', resetTresQuartos);
            document.getElementById('resetToco').addEventListener('click', resetToco);
            document.getElementById('resetAllConfigs').addEventListener('click', resetAll);
            document.getElementById('limparResultadosBtn').addEventListener('click', limparTudo);

            const savedRotaInicial = localStorage.getItem('rotaInicial');
            const savedRotaFinal = localStorage.getItem('rotaFinal');
            if (savedRotaInicial) {
                document.getElementById('rotaInicialInput').value = savedRotaInicial;
            }
            if (savedRotaFinal) {
                document.getElementById('rotaFinalInput').value = savedRotaFinal;
            }
        });

        const rotaVeiculoMap = {
            '11101': { type: 'fiorino', title: 'Rota 11101' }, '11301': { type: 'fiorino', title: 'Rota 11301' }, '11311': { type: 'fiorino', title: 'Rota 11311' }, '11561': { type: 'fiorino', title: 'Rota 11561' }, '11721': { type: 'fiorino', title: 'Rotas 11721 & 11731', combined: ['11731'] }, '11731': { type: 'fiorino', title: 'Rotas 11721 & 11731', combined: ['11721'] },
            '11102': { type: 'van', title: 'Rota 11102' }, '11331': { type: 'van', title: 'Rota 11331' }, '11341': { type: 'van', title: 'Rota 11342' }, '11351': { type: 'van', title: 'Rota 11351' }, '11521': { type: 'van', title: 'Rota 11521' }, '11531': { type: 'van', title: 'Rota 11531' }, '11551': { type: 'van', title: 'Rota 11551' }, '11571': { type: 'van', title: 'Rota 11571' }, '11701': { type: 'van', title: 'Rota 11701' }, '11711': { type: 'van', title: 'Rota 11711' },
            '11361': { type: 'tresQuartos', title: 'Rota 11361' }, '11501': { type: 'tresQuartos', title: 'Rotas 11501, 11502 & 11511', combined: ['11502', '11511'] }, '11502': { type: 'tresQuartos', title: 'Rotas 11501, 11502 & 11511', combined: ['11501', '11511'] }, '11511': { type: 'tresQuartos', title: 'Rotas 11501, 11502 & 11511', combined: ['11501', '11502'] }, '11541': { type: 'tresQuartos', title: 'Rota 11541' }
        };
        
        const fileInput = document.getElementById('fileInput');
        const processarBtn = document.getElementById('processarBtn');
        const statusDiv = document.getElementById('status');
        const dropZone = document.getElementById('drop-zone');
        const dropZoneText = document.getElementById('drop-zone-text');
        const isNumeric = (str) => str && /^\d+$/.test(String(str).trim());

        fileInput.addEventListener('change', (event) => { handleFile(event.target.files[0]); });
        dropZone.addEventListener('dragover', (event) => { event.stopPropagation(); event.preventDefault(); dropZone.classList.add('border-primary'); });
        dropZone.addEventListener('dragleave', (event) => { event.stopPropagation(); event.preventDefault(); dropZone.classList.remove('border-primary'); });
        dropZone.addEventListener('drop', (event) => { event.stopPropagation(); event.preventDefault(); dropZone.classList.remove('border-primary'); handleFile(event.dataTransfer.files[0]); });

        function handleFile(file) {
            if (!file) return;
            limparTudo();
            statusDiv.innerHTML = '<p class="text-info">Carregando planilha...</p>';
            processarBtn.disabled = true;
            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, {type: 'array', cellDates:true});
                    const firstSheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[firstSheetName];
                    const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
                    
                    let headerRowIndex = -1;
                    for (let i = 0; i < rawData.length; i++) {
                        const row = rawData[i];
                        if (row && row.some(cell => String(cell).trim().toLowerCase() === 'cod_rota')) {
                            headerRowIndex = i;
                            originalColumnHeaders = row.map(h => h ? String(h).trim() : ''); // Salva os cabeçalhos originais
                            break;
                        }
                    }

                    if (headerRowIndex === -1) throw new Error("Não foi possível encontrar a linha de cabeçalho com 'Cod_Rota'. Verifique o arquivo.");
                    
                    const dataRows = rawData.slice(headerRowIndex + 1);
                    planilhaData = dataRows.map(row => { 
                        const pedido = {}; 
                        originalColumnHeaders.forEach((header, i) => { 
                            if (header) { 
                                if ((header.toLowerCase() === 'predat' || header.toLowerCase() === 'dat_ped')) {
                                    let cellValue = row[i];
                                    if (typeof cellValue === 'number') {
                                        const date = new Date(Math.round((cellValue - 25569) * 86400 * 1000));
                                        if (!isNaN(date.getTime())) {
                                            pedido[header] = date;
                                        } else {
                                            pedido[header] = '';
                                        }
                                    } else if (cellValue instanceof Date) {
                                       if (!isNaN(cellValue.getTime())) {
                                            pedido[header] = cellValue;
                                        } else {
                                            pedido[header] = '';
                                        }
                                    } else {
                                        pedido[header] = cellValue !== undefined ? cellValue : '';
                                    }
                                } else {
                                    pedido[header] = row[i] !== undefined ? row[i] : ''; 
                                }
                            } 
                        }); 
                        return pedido; 
                    });
                    planilhaData.forEach(checkAgendamento);
                    statusDiv.innerHTML = `<p class="text-success">Planilha "${file.name}" carregada. ${planilhaData.length} linhas prontas para processar.</p>`;
                    processarBtn.disabled = false;
                    dropZoneText.innerHTML = `<p class="text-success">Arquivo "${file.name}" carregado.</p><button type="button" class="btn btn-secondary btn-sm" onclick="event.stopPropagation(); document.getElementById('fileInput').click()">Selecionar Outro</button>`;

                    if (document.getElementById('autoProcessCheckbox').checked) {
                        processar();
                    }

                } catch (error) {
                    statusDiv.innerHTML = `<p class="text-danger"><strong>Erro ao ler o arquivo:</strong> ${error.message}</p>`;
                    console.error(error);
                }
            };
            reader.readAsArrayBuffer(file);
        }

        function buscarPedido() {
            const searchInput = document.getElementById('pedidoSearchInput').value.trim();
            const searchResultDiv = document.getElementById('search-result');
            searchResultDiv.innerHTML = '';
            if (!searchInput) return;
            if (planilhaData.length === 0) { searchResultDiv.innerHTML = '<p class="text-warning">Por favor, carregue e processe a planilha primeiro.</p>'; return; }
            let pedidoEncontrado = null; let local = 'Não encontrado'; let accordionId = '';
            
            // Busca nas listas dinâmicas
            if (currentLeftoversForPrinting.length > 0) {
                 pedidoEncontrado = currentLeftoversForPrinting.find(p => String(p.Num_Pedido) === searchInput);
                 if (pedidoEncontrado) local = 'Sobras Finais (na Mesa de Trabalho)';
            }
            if (!pedidoEncontrado) {
                for (const loadId in activeLoads) {
                    const load = activeLoads[loadId];
                    pedidoEncontrado = load.pedidos.find(p => String(p.Num_Pedido) === searchInput);
                    if (pedidoEncontrado) {
                        local = `Carga #${load.numero || loadId.split('-')[1]} (${load.vehicleType})`;
                        break;
                    }
                }
            }

            // Fallback para as listas originais processadas
            if (!pedidoEncontrado) {
                pedidoEncontrado = pedidosGeraisAtuais.find(p => String(p.Num_Pedido) === searchInput);
                if (pedidoEncontrado) { local = 'Pedidos Disponíveis para Montagem'; accordionId = 'accordionGeral'; } 
            }
            if (!pedidoEncontrado) {
                pedidoEncontrado = pedidosComCFNumericoIsolado.find(p => String(p.Num_Pedido) === searchInput);
                if (pedidoEncontrado) { local = 'Pedidos Filtrados'; accordionId = 'accordionCF'; }
            }
            if (!pedidoEncontrado) {
                for (const cf in gruposToco) {
                    pedidoEncontrado = gruposToco[cf].pedidos.find(p => String(p.Num_Pedido) === searchInput);
                    if (pedidoEncontrado) { local = `Cargas "Toco" (CF: ${cf})`; accordionId = 'accordionToco'; break; }
                }
            }
            if (!pedidoEncontrado) {
                pedidoEncontrado = rota1SemCarga.find(p => String(p.Num_Pedido) === searchInput);
                if (pedidoEncontrado) { local = 'Pedidos da Rota 1 para Alteração'; }
            }
             if (!pedidoEncontrado) {
                const originalPedido = planilhaData.find(p => String(p.Num_Pedido) === searchInput);
                if (originalPedido) {
                            pedidoEncontrado = originalPedido;
                            if(pedidosBloqueados.has(String(originalPedido.Num_Pedido))) {
                                local = 'Bloqueado Manualmente por você.';
                            } else if (pedidosEspeciaisProcessados.has(String(originalPedido.Num_Pedido))) {
                                local = 'Alocado na Carga Especial.';
                            }
                            else {
                                local = 'Encontrado na planilha original, mas foi filtrado por alguma regra.';
                            }
                }
            }

            if (pedidoEncontrado) {
                let buttons = '';
                if (local.startsWith('Pedidos Disponíveis') || local.startsWith('Sobras')) {
                    const isPrioritized = pedidosPrioritarios.includes(String(pedidoEncontrado.Num_Pedido));
                    buttons = `<button class="btn btn-primary btn-sm" onclick="priorizarPedido('${pedidoEncontrado.Num_Pedido}')" ${isPrioritized ? 'disabled' : ''}>${isPrioritized ? 'Prioridade Marcada' : 'Marcar como Prioridade'}</button>
                                     <button class="btn btn-secondary btn-sm ms-2" onclick="highlightPedido('${pedidoEncontrado.Num_Pedido}')">Destacar na Lista</button>`;
                } else if (accordionId || local.startsWith('Carga')) { 
                                     buttons = `<button class="btn btn-secondary btn-sm" onclick="highlightPedido('${pedidoEncontrado.Num_Pedido}')">Destacar na Lista</button>`;
                }
                searchResultDiv.innerHTML = `<div class="alert alert-info"><h5>Pedido ${searchInput} encontrado!</h5><p class="mb-1"><strong>Local:</strong> ${local}</p><p class="mb-1"><strong>Cliente:</strong> ${pedidoEncontrado.Nome_Cliente}<br><strong>Peso:</strong> ${pedidoEncontrado.Quilos_Saldo} kg</p>${buttons ? `<div class="mt-2">${buttons}</div>` : ''}</div>`;
            } else { searchResultDiv.innerHTML = '<p class="text-danger">Pedido não encontrado em nenhuma das listas.</p>'; }
        }

        function priorizarPedido(numPedido) { if (!pedidosPrioritarios.includes(String(numPedido))) { pedidosPrioritarios.push(String(numPedido)); buscarPedido(); } }

        function highlightPedido(numPedido) {
            document.querySelectorAll('tr.table-info').forEach(r => r.classList.remove('table-info'));
            const row = document.getElementById(`pedido-${numPedido}`);
            if (row) {
                row.classList.add('table-info');
                const collapseEl = row.closest('.accordion-collapse');
                if (collapseEl && !collapseEl.classList.contains('show')) { 
                    bootstrap.Collapse.getOrCreateInstance(collapseEl).show(); 
                }
                setTimeout(() => { row.scrollIntoView({ behavior: 'smooth', block: 'center' }); }, 350);
            }
        }
        
        function atualizarListaBloqueados() {
            const divLista = document.getElementById('lista-pedidos-bloqueados');
            divLista.innerHTML = '';
            if (pedidosBloqueados.size === 0) {
                divLista.innerHTML = '<span class="text-muted">Nenhum pedido bloqueado.</span>';
                return;
            }
            
            const list = document.createElement('ul');
            list.className = 'list-group list-group-flush';
            pedidosBloqueados.forEach(numPedido => {
                const item = document.createElement('li');
                item.className = 'list-group-item d-flex justify-content-between align-items-center py-1 bg-transparent';
                item.innerHTML = `<span>${numPedido}</span> <button class="btn btn-sm btn-outline-secondary" onclick="desbloquearPedido('${numPedido}')">Desbloquear</button>`;
                list.appendChild(item);
            });
            divLista.appendChild(list);
        }

        function bloquearPedido() {
            const input = document.getElementById('bloquearPedidoInput');
            const numPedido = input.value.trim();
            if (numPedido) {
                pedidosBloqueados.add(numPedido);
                input.value = '';
                atualizarListaBloqueados();
            }
        }

        function desbloquearPedido(numPedido) {
            pedidosBloqueados.delete(numPedido);
            atualizarListaBloqueados();
        }

        function resetarEstadoGlobal() {
            pedidosGeraisAtuais = [];
            gruposToco = {};
            pedidosComCFNumericoIsolado = [];
            pedidosPrioritarios = [];
            rota1SemCarga = [];
            tocoPedidoIds.clear();
            currentLeftoversForPrinting = [];
            activeLoads = {};
        }

        function limparTudo(){
            resetarEstadoGlobal();
            originalColumnHeaders = []; // Limpa os cabeçalhos também

            pedidosEspeciaisProcessados.clear();
            pedidosBloqueados.clear();
            
            const idsParaLimpar = [
                'resultado-carga-especial', 'resultado-bloqueados', 'resultado-geral', 
                'resultado-fiorino-geral', 'resultado-van-geral', 'resultado-34-geral',
                'resultado-rota1', 'resultado-tres-quartos', 'resultado-toco', 
                'resultado-cf-numerico', 'search-result'
            ];
            idsParaLimpar.forEach(id => {
                const el = document.getElementById(id);
                if(el) el.innerHTML = '';
            });

            document.getElementById('card-resumo-geral-container').innerHTML = '';
            document.getElementById('card-resumo-geral-container').style.display = 'none';

            document.getElementById('pedidosEspeciaisInput').value = '';
            document.getElementById('bloquearPedidoInput').value = '';
            document.getElementById('pedidoSearchInput').value = '';
            atualizarListaBloqueados();

            dropZoneText.innerHTML = `<i class="bi bi-file-earmark-spreadsheet-fill fs-2 text-secondary"></i>
                                       <p class="text-secondary mt-2">Arraste o arquivo aqui ou</p>
                                       <button type="button" class="btn btn-secondary btn-sm" onclick="event.stopPropagation(); document.getElementById('fileInput').click()"><i class="bi bi-folder2-open me-2"></i>Selecionar Arquivo</button>`;
            
            planilhaData = [];
            processarBtn.disabled = true;
            statusDiv.innerHTML = '';
        }

        function processar() {
            localStorage.setItem('rotaInicial', document.getElementById('rotaInicialInput').value);
            localStorage.setItem('rotaFinal', document.getElementById('rotaFinalInput').value);

            statusDiv.innerHTML = '<div class="d-flex align-items-center"><div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div><span class="text-primary">Processando, por favor aguarde...</span></div>';
            processarBtn.disabled = true;
            
            setTimeout(() => {
                const resultadoGeralDiv = document.getElementById('resultado-geral');
                const resultadoTocoDiv = document.getElementById('resultado-toco');
                const resultadoTresQuartosDiv = document.getElementById('resultado-tres-quartos');
                const resultadoCfNumericoDiv = document.getElementById('resultado-cf-numerico');
                const resultadoRota1Div = document.getElementById('resultado-rota1');
                const resultadoBloqueadosDiv = document.getElementById('resultado-bloqueados');
                
                try {
                    if (planilhaData.length === 0) { throw new Error("Nenhum dado de planilha carregado."); }
                    
                    resetarEstadoGlobal();
                    
                    ['resultado-fiorino-geral', 'resultado-van-geral', 'resultado-34-geral', 'resultado-geral', 'resultado-toco', 'resultado-tres-quartos', 'resultado-cf-numerico', 'resultado-rota1', 'resultado-bloqueados'].forEach(id => {
                        const el = document.getElementById(id);
                        if(el) el.innerHTML = '';
                    });

                    let pedidosManualmenteBloqueados = [];
                    let pedidosDisponiveis = [];
                    planilhaData.filter(p => p.Num_Pedido).forEach(p => {
                        if (pedidosBloqueados.has(String(p.Num_Pedido))) {
                            pedidosManualmenteBloqueados.push(p);
                        } else {
                            pedidosDisponiveis.push(p);
                        }
                    });
                    displayPedidosBloqueados(resultadoBloqueadosDiv, pedidosManualmenteBloqueados);
                    
                    pedidosDisponiveis = pedidosDisponiveis.filter(p => !pedidosEspeciaisProcessados.has(String(p.Num_Pedido)));

                    const col5ValuesForRota1 = ['TBL 08', 'TBL TODESCHINI'];
                    rota1SemCarga = pedidosDisponiveis.filter(p => {
                        const codRota = String(p.Cod_Rota || '').trim();
                        const cfIsNumeric = isNumeric(p.CF);
                        const col5 = String(p.Coluna5 || '').trim();
                        return codRota === '1' && !cfIsNumeric && col5ValuesForRota1.includes(col5);
                    });
                    const rota1PedidoIds = new Set(rota1SemCarga.map(p => p.Num_Pedido));
                    displayRota1(resultadoRota1Div, rota1SemCarga);

                    let pedidosParaProcessamentoGeral = pedidosDisponiveis.filter(p => !rota1PedidoIds.has(p.Num_Pedido));

                    const rotaInicialInput = document.getElementById('rotaInicialInput').value; const rotaFinalInput = document.getElementById('rotaFinalInput').value;
                    const pedidos = pedidosParaProcessamentoGeral.filter(p => String(p.Coluna4) != '500');

                    const clientesComBloqueio = new Set();
                    pedidos.forEach(p => {
                        if (String(p['BLOQ.']).trim()) { // Verifica se a coluna BLOQ. tem qualquer valor
                            clientesComBloqueio.add(normalizeClientId(p.Cliente));
                        }
                    });

                    const pedidosTocoBase = pedidos.filter(p => (p.Coluna4 && String(p.Coluna4).toUpperCase().includes('TOCO')) || (p.Coluna5 && String(p.Coluna5).toUpperCase().includes('TOCO')));
                    const cfCounts = {};
                    pedidosTocoBase.forEach(p => { if (p.CF && isNumeric(p.CF)) { cfCounts[p.CF] = (cfCounts[p.CF] || 0) + 1; } });
                    const cfsRepetidos = Object.keys(cfCounts).filter(cf => cfCounts[cf] > 1);
                    const pedidosTocoFiltrados = pedidosTocoBase.filter(p => cfsRepetidos.includes(String(p.CF)));
                    gruposToco = pedidosTocoFiltrados.reduce((acc, p) => {
                        const cf = p.CF;
                        if (!acc[cf]) { acc[cf] = { pedidos: [], totalKg: 0, totalCubagem: 0 }; } 
                        acc[cf].pedidos.push(p); 
                        acc[cf].totalKg += parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0;
                        acc[cf].totalCubagem += parseFloat(String(p.Cubagem).replace(',', '.')) || 0;
                        return acc;
                    }, {});
                    displayToco(resultadoTocoDiv, gruposToco);
                    tocoPedidoIds = new Set(pedidosTocoFiltrados.map(p => String(p.Num_Pedido)));

                    const rotaMin = rotaInicialInput ? parseInt(rotaInicialInput, 10) : 0; const rotaMax = rotaFinalInput ? parseInt(rotaFinalInput, 10) : 99999;
                    let pedidosParaProcessamento = [];
                    
                    pedidos.forEach(p => {
                        if (tocoPedidoIds.has(String(p.Num_Pedido))) return;
                        if (clientesComBloqueio.has(normalizeClientId(p.Cliente))) {
                            pedidosComCFNumericoIsolado.push(p);
                            return;
                        }
                        if (['21', '23', '17'].includes(String(p.Coluna4))) return;
                        const rotaAtualNum = parseInt(String(p.Cod_Rota), 10);
                        if (rotaMin > 0 && rotaMax > 0 && !(rotaAtualNum >= rotaMin && rotaAtualNum <= rotaMax)) return;
                        if (isNumeric(p.CF)) {
                            pedidosComCFNumericoIsolado.push(p);
                        } else {
                            pedidosParaProcessamento.push(p);
                        }
                    });
                    
                    displayPedidosCFNumerico(resultadoCfNumericoDiv, pedidosComCFNumericoIsolado);

                    let tresQuartosLoads = [];
                    const MIN_KG_3_4 = parseFloat(document.getElementById('tresQuartosMinCapacity').value);
                    const MAX_KG_3_4 = parseFloat(document.getElementById('tresQuartosMaxCapacity').value);
                    const LARGE_ORDER_KG = 1700;
                    const largeOrdersByRoute = pedidosParaProcessamento.reduce((acc, p) => {
                        const peso = parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0;
                        if (peso >= LARGE_ORDER_KG) { const rota = p.Cod_Rota; if (!acc[rota]) acc[rota] = []; acc[rota].push(p); } return acc;
                    }, {});
                    const pedidosEmCargas3_4 = new Set();
                    Object.keys(largeOrdersByRoute).forEach(rota => {
                        const largeOrders = largeOrdersByRoute[rota];
                        if (largeOrders.length === 1) {
                            const largeOrder = largeOrders[0]; if (pedidosEmCargas3_4.has(largeOrder.Num_Pedido)) return;
                            let newLoad = { 
                                pedidos: [largeOrder], 
                                totalKg: parseFloat(String(largeOrder.Quilos_Saldo).replace(',', '.')) || 0,
                                totalCubagem: parseFloat(String(largeOrder.Cubagem).replace(',', '.')) || 0,
                                rota: rota 
                            };
                            const otherOrdersInRoute = pedidosParaProcessamento.filter(p => p.Cod_Rota === rota && p.Num_Pedido !== largeOrder.Num_Pedido).sort((a, b) => (parseFloat(String(b.Quilos_Saldo).replace(',', '.')) || 0) - (parseFloat(String(a.Quilos_Saldo).replace(',', '.')) || 0));
                            for (const order of otherOrdersInRoute) {
                                if (pedidosEmCargas3_4.has(order.Num_Pedido)) continue;
                                const orderKg = parseFloat(String(order.Quilos_Saldo).replace(',', '.')) || 0;
                                if (newLoad.totalKg + orderKg <= MAX_KG_3_4) { 
                                    newLoad.pedidos.push(order); 
                                    newLoad.totalKg += orderKg; 
                                    newLoad.totalCubagem += parseFloat(String(order.Cubagem).replace(',', '.')) || 0;
                                }
                            }
                            if (newLoad.totalKg >= MIN_KG_3_4) { tresQuartosLoads.push(newLoad); newLoad.pedidos.forEach(p => pedidosEmCargas3_4.add(p.Num_Pedido)); }
                        }
                    });
                    tresQuartosLoads.forEach((load, index) => { load.numero = index + 1; });
                    displayTresQuartos(resultadoTresQuartosDiv, tresQuartosLoads);

                    pedidosGeraisAtuais = pedidosParaProcessamento.filter(p => !pedidosEmCargas3_4.has(p.Num_Pedido));
                    const gruposGerais = pedidosGeraisAtuais.reduce((acc, p) => {
                        const rota = p.Cod_Rota; if (!acc[rota]) { acc[rota] = { pedidos: [], totalKg: 0 }; } acc[rota].pedidos.push(p); acc[rota].totalKg += parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0; return acc;
                    }, {});
                    displayGerais(resultadoGeralDiv, gruposGerais);

                    const stats = {
                        totalPlanilha: planilhaData.length,
                        pesoTotal: planilhaData.reduce((sum, p) => sum + (parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0), 0),
                        pedidosEspeciais: pedidosEspeciaisProcessados.size,
                        pedidosBloqueados: pedidosManualmenteBloqueados.length,
                        pedidosToco: tocoPedidoIds.size,
                        pedidos34Auto: tresQuartosLoads.reduce((sum, load) => sum + load.pedidos.length, 0),
                        pedidosFiltrados: pedidosComCFNumericoIsolado.length + rota1SemCarga.length,
                        pedidosDisponiveis: pedidosGeraisAtuais.length,
                        pesoDisponivel: pedidosGeraisAtuais.reduce((sum, p) => sum + (parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0), 0),
                    };
                    displayResumoGeral(stats);
                    
                    statusDiv.innerHTML = `<p class="text-success">Processamento concluído com sucesso!</p>`;
                } catch (error) { 
                    statusDiv.innerHTML = `<p class="text-danger"><strong>Ocorreu um erro:</strong></p><pre>${error.stack}</pre>`; 
                    console.error(error); 
                } finally {
                    processarBtn.disabled = false;
                }
            }, 50);
        }

        function isOverdue(predat) {
            if (!predat) { return false; }
            const date = predat instanceof Date ? predat : new Date(predat);
            if (isNaN(date)) { return false; } 

            const today = new Date();
            today.setHours(0, 0, 0, 0);
            return date < today;
        }

        function exportarPedidosAtrasados() {
            if (pedidosGeraisAtuais.length === 0) {
                alert("Por favor, processe a planilha primeiro para definir as rotas.");
                return;
            }

            // Filtra pedidos atrasados E que não estão bloqueados
            const pedidosAtrasados = pedidosGeraisAtuais.filter(p => isOverdue(p.Predat) && !String(p['BLOQ.']).trim());

            if (pedidosAtrasados.length === 0) {
                alert("Nenhum pedido em atraso (e não bloqueado) foi encontrado nos resultados processados.");
                return;
            }

            alert(`${pedidosAtrasados.length} pedidos em atraso serão exportados.`);

            // Define o cabeçalho EXATO e na ORDEM desejada
            const header = [
                'Cliente', 'Nome_Cliente', 'Cidade', 'UF', 'Num_Pedido', 
                'Quilos_Saldo', 'Predat', 'Dat_Ped', 'Coluna5'
            ];
            
            const dataToExport = pedidosAtrasados.map(p => {
                const newP = {...p};
                if (newP.Predat instanceof Date) { newP.Predat = newP.Predat.toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
                if (newP.Dat_Ped instanceof Date) { newP.Dat_Ped = newP.Dat_Ped.toLocaleDateString('pt-BR', { timeZone: 'UTC' }); }
                
                // Mapeia o objeto para ter apenas as chaves do cabeçalho
                let filteredP = {};
                header.forEach(col => {
                    filteredP[col] = newP[col];
                });
                return filteredP;
            });

            // Cria a planilha usando a ordem exata das colunas
            const worksheet = XLSX.utils.json_to_sheet(dataToExport, { header: header });
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, "Pedidos Atrasados");
            XLSX.writeFile(workbook, "pedidos_atrasados.xlsx");
        }
        
        function createTable(pedidos, columnsToDisplay, sourceId = '') {
            if (!pedidos || pedidos.length === 0) return '';
            const colunasExibir = columnsToDisplay || ['Cod_Rota', 'Cliente', 'Nome_Cliente', 'Agendamento', 'Num_Pedido', 'Quilos_Saldo', 'Cubagem', 'Cidade', 'Predat', 'BLOQ.', 'Coluna4', 'Coluna5', 'CF'];
            let table = '<div class="table-responsive"><table class="table table-sm table-bordered table-striped table-hover"><thead><tr>';
            colunasExibir.forEach(c => table += `<th>${c.replace('_', ' ')}</th>`);
            table += '</tr></thead><tbody>';
            pedidos.forEach(p => {
                const isPriorityRow = pedidosPrioritarios.includes(String(p.Num_Pedido));
                const clienteIdNormalizado = normalizeClientId(p.Cliente);
                table += `<tr id="pedido-${p.Num_Pedido}" 
                                   class="${isPriorityRow ? 'table-primary' : ''}" 
                                   data-cliente-id="${clienteIdNormalizado}" 
                                   data-pedido-id="${p.Num_Pedido}"
                                   onclick="highlightClientRows(event)"
                                   draggable="true"
                                   ondragstart="dragStart(event, '${p.Num_Pedido}', '${clienteIdNormalizado}', '${sourceId}')">`;
                colunasExibir.forEach(c => {
                    let cellContent = p[c] === undefined || p[c] === null ? '' : p[c];
                    if (c === 'Num_Pedido') {
                        const isPriority = pedidosPrioritarios.includes(String(p.Num_Pedido));
                        const priorityBadge = isPriority ? ' <span class="badge bg-primary">Prioridade</span>' : '';
                        table += `<td>${cellContent}${priorityBadge}</td>`;
                    } else if (c === 'Agendamento' && cellContent === 'Sim') {
                        table += `<td><span class="badge bg-warning text-dark">${cellContent}</span></td>`;
                    } else if (c === 'Predat' || c === 'Dat_Ped') {
                        let formattedDate = '';
                        const dateObj = cellContent instanceof Date ? cellContent : new Date(cellContent);

                        if (dateObj instanceof Date && !isNaN(dateObj)) {
                            formattedDate = dateObj.toLocaleDateString('pt-BR', { timeZone: 'UTC' });
                        } else {
                            formattedDate = cellContent || '';
                        }
                        
                        if (c === 'Predat' && isOverdue(p.Predat)) {
                            table += `<td><span class="text-danger fw-bold">${formattedDate}</span></td>`;
                        } else {
                            table += `<td>${formattedDate}</td>`;
                        }
                    } else {
                        table += `<td>${cellContent}</td>`;
                    }
                });
                table += '</tr>';
            });
            table += '</tbody></table></div>';
            return table;
        }

        function displayGerais(div, grupos) {
            if (Object.keys(grupos).length === 0) { 
                div.innerHTML = '<div class="alert alert-secondary text-center">Nenhum pedido disponível para montagem.</div>'; 
                document.getElementById('botoes-fiorino').innerHTML = '<p class="text-muted">Nenhuma rota de Fiorino encontrada.</p>';
                document.getElementById('botoes-van').innerHTML = '<p class="text-muted">Nenhuma rota de Van encontrada.</p>';
                document.getElementById('botoes-34').innerHTML = '<p class="text-muted">Nenhuma rota de 3/4 encontrada.</p>';
                return; 
            }
            const rotasDisponiveis = new Set(Object.keys(grupos));
            const botoes = { fiorino: '', van: '', tresQuartos: '' };
            const addedButtons = new Set();
            rotasDisponiveis.forEach(rota => {
                const config = rotaVeiculoMap[rota];
                if (config && !addedButtons.has(rota)) {
                    let rotaValue = `'${rota}'`;
                    if (config.combined) {
                        const combinedRoutes = [rota, ...config.combined];
                        rotaValue = `[${combinedRoutes.map(r => `'${r}'`).join(', ')}]`;
                        combinedRoutes.forEach(r => addedButtons.add(r));
                    }
                    const vehicleType = config.type;
                    const colorClass = vehicleType === 'fiorino' ? 'success' : (vehicleType === 'van' ? 'primary' : 'warning');
                    const functionCall = vehicleType === 'fiorino' ? 'separarCargasFiorino' : (vehicleType === 'van' ? 'separarCargasVan' : 'separarCargas34');
                    const divId = vehicleType === 'fiorino' ? 'resultado-fiorino-geral' : (vehicleType === 'van' ? 'resultado-van-geral' : 'resultado-34-geral');
                    const btnId = `btn-${vehicleType}-${rota}`;
                    botoes[vehicleType] += `<button id="${btnId}" class="btn btn-outline-${colorClass} mt-2 me-2" onclick="${functionCall}(${rotaValue}, '${divId}', '${config.title}', this)">${config.title}</button>`;
                }
            });
            document.getElementById('botoes-fiorino').innerHTML = botoes.fiorino || '<p class="text-muted">Nenhuma rota de Fiorino encontrada.</p>';
            document.getElementById('botoes-van').innerHTML = botoes.van || '<p class="text-muted">Nenhuma rota de Van encontrada.</p>';
            document.getElementById('botoes-34').innerHTML = botoes.tresQuartos || '<p class="text-muted">Nenhuma rota de 3/4 encontrada.</p>';
            let accordionHtml = '<div class="accordion accordion-flush" id="accordionGeral">';
            Object.keys(grupos).sort().forEach((rota, index) => {
                const grupo = grupos[rota];
                const totalKgFormatado = grupo.totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                const veiculo = rotaVeiculoMap[rota]?.type || 'N/D';
                const veiculoNome = veiculo.replace('tresQuartos', '3/4').replace(/^\w/, c => c.toUpperCase());
                accordionHtml += `<div class="accordion-item"><h2 class="accordion-header" id="headingGeral${index}"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseGeral${index}"><strong>Rota: ${rota} (${veiculoNome})</strong> &nbsp; <span class="badge bg-secondary ms-2"><i class="bi bi-box me-1"></i>${grupo.pedidos.length}</span> <span class="badge bg-info ms-2"><i class="bi bi-database me-1"></i>${totalKgFormatado} kg</span></button></h2><div id="collapseGeral${index}" class="accordion-collapse collapse" data-bs-parent="#accordionGeral"><div class="accordion-body">${createTable(grupo.pedidos, null, 'geral')}</div></div></div>`;
            });
            accordionHtml += '</div>'; div.innerHTML = accordionHtml;
        }
        
        function displayPedidosBloqueados(div, pedidos) {
            if (pedidos.length === 0) {
                div.innerHTML = '<div class="alert alert-secondary text-center">Nenhum pedido bloqueado manualmente no último processamento.</div>';
                return;
            }
            const totalKg = pedidos.reduce((sum, p) => sum + (parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0), 0);
            const totalKgFormatado = totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            let html = `<div class="alert alert-danger"><strong>Total Bloqueado:</strong> ${pedidos.length} pedidos / ${totalKgFormatado} kg</div>`;
            html += createTable(pedidos);
            div.innerHTML = html;
        }

        function displayPedidosCFNumerico(div, pedidos) {
            if (pedidos.length === 0) { div.innerHTML = '<div class="alert alert-secondary text-center">Nenhum pedido filtrado por CF numérico ou por Regra de Bloqueio.</div>'; return; }
            const grupos = pedidos.reduce((acc, p) => {
                const rota = p.Cod_Rota; if (!acc[rota]) { acc[rota] = { pedidos: [], totalKg: 0 }; } acc[rota].pedidos.push(p); acc[rota].totalKg += parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0; return acc;
            }, {});
            let accordionHtml = '<div class="accordion accordion-flush" id="accordionCF">';
            Object.keys(grupos).sort().forEach((rota, index) => {
                const grupo = grupos[rota];
                const totalKgFormatado = grupo.totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                accordionHtml += `<div class="accordion-item"><h2 class="accordion-header" id="headingCF${index}"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseCF${index}"><strong>Rota: ${rota}</strong> &nbsp; <span class="badge bg-secondary ms-2"><i class="bi bi-box me-1"></i>${grupo.pedidos.length}</span> <span class="badge bg-info ms-2"><i class="bi bi-database me-1"></i>${totalKgFormatado} kg</span></button></h2><div id="collapseCF${index}" class="accordion-collapse collapse" data-bs-parent="#accordionCF"><div class="accordion-body">${createTable(pedidos)}</div></div></div>`;
            });
            accordionHtml += '</div>'; div.innerHTML = accordionHtml;
        }

        function displayTresQuartos(div, loads) {
            if (loads.length === 0) { div.innerHTML = '<div class="alert alert-secondary text-center">Nenhuma carga 3/4 formada automaticamente.</div>'; return; }
            let html = `<div class="d-flex justify-content-between align-items-center mb-2 no-print"><h4 class="mb-0">Cargas 3/4 (Automático):</h4>${loads.length > 0 ? `<button class="btn btn-sm btn-outline-light" onclick="imprimirGeneric('${div.id}', 'Cargas 3/4 (Automático)')"><i class="bi bi-printer-fill me-1"></i>Imprimir</button>` : ''}</div>`;
            
            const maxKg = parseFloat(document.getElementById('tresQuartosMaxCapacity').value);

            loads.forEach(load => {
                const loadId = `tres-quartos-auto-${load.numero}`;
                load.id = loadId;
                load.vehicleType = 'tresQuartos';
                activeLoads[loadId] = load;

                const totalKgFormatado = load.totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                const pesoPercentual = (load.totalKg / maxKg) * 100;
                let progressColor = 'bg-success';
                if (pesoPercentual > 95) progressColor = 'bg-danger';
                else if (pesoPercentual > 75) progressColor = 'bg-warning';

                const progressBar = `
                    <div class="progress mt-2" role="progressbar" style="height: 10px;">
                      <div class="progress-bar ${progressColor}" style="width: ${pesoPercentual}%"></div>
                    </div>`;

                html += `<div id="${loadId}" class="card mb-3 drop-zone-card" ondragover="dragOver(event)" ondragleave="dragLeave(event)" ondrop="drop(event)" data-load-id="${loadId}" data-vehicle-type="tresQuartos"><div class="card-header bg-warning text-dark">Carga 3/4 #${load.numero} (Rota: ${load.rota}) - Total: ${totalKgFormatado} kg</div><div class="card-body">${progressBar}${createTable(load.pedidos, null, loadId)}</div></div>`;
            });
            div.innerHTML = html;
        }
        
        function displayRota1(div, pedidos) {
            if (!pedidos || pedidos.length === 0) {
                div.innerHTML = '<div class="alert alert-secondary text-center">Nenhum pedido da Rota 1 para alteração encontrado.</div>';
                return;
            }

            let html = `
                <div class="d-flex justify-content-end mb-2 no-print">
                    <button class="btn btn-sm btn-outline-warning" onclick="imprimirGeneric('resultado-rota1', 'Pedidos Rota 1 para Alteração')">
                        <i class="bi bi-printer-fill me-1"></i>Imprimir Lista
                    </button>
                </div>
                ${createTable(pedidos, ['Num_Pedido', 'Cliente', 'Nome_Cliente', 'Quilos_Saldo', 'Cidade', 'Predat', 'CF', 'Coluna5'])}
            `;
            div.innerHTML = html;
        }

        function imprimirGeneric(divId, title) {
            const divToPrint = document.getElementById(divId);
            if (!divToPrint) return;

            const printWindow = createPrintWindow(title);
            const contentToPrint = divToPrint.cloneNode(true);
            const buttonsInContent = contentToPrint.querySelectorAll('button.no-print, .no-print');
            buttonsInContent.forEach(btn => btn.remove());

            printWindow.document.body.innerHTML = `<h3>${title}</h3>` + contentToPrint.innerHTML;
            printWindow.document.close();
            printWindow.focus(); 
            setTimeout(() => { 
                printWindow.print(); 
                printWindow.close(); 
            }, 500);
        }

        function createPrintWindow(title) {
            const printWindow = window.open('', '', 'height=800,width=1200');
            printWindow.document.write('<html><head><title>' + title + '</title>');
            printWindow.document.write('<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">');
            printWindow.document.write(`<style>body { margin: 20px; -webkit-print-color-adjust: exact; print-color-adjust: exact; } .card { break-inside: avoid; margin-bottom: 1rem; page-break-inside: avoid; } .no-print { display: none !important; } .bg-success { background-color: #198754 !important; color: white !important; } .bg-primary { background-color: #0d6efd !important; color: white !important; } .bg-warning { background-color: #ffc107 !important; color: black !important; } .bg-danger { background-color: #dc3545 !important; color: white !important; } .table-responsive { overflow: visible !important; } table, th, td { border: 1px solid #dee2e6 !important; } .table-primary, .table-primary > th, .table-primary > td { --bs-table-bg: #cfe2ff !important; color: #000 !important; } h1, h2, h3, h4, h5 { margin-top: 1rem; margin-bottom: 0.5rem; }</style></head><body>`);
            return printWindow;
        }
        
        function imprimirSobras(title) {
            if (currentLeftoversForPrinting.length === 0) { alert("Nenhuma sobra para imprimir."); return; }
            const totalKgFormatado = currentLeftoversForPrinting.reduce((sum, p) => sum + (parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0), 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            const printWindow = createPrintWindow(title);
            let contentToPrint = `<h3>${title} - Total: ${totalKgFormatado} kg</h3>` + createTable(currentLeftoversForPrinting);
            printWindow.document.body.innerHTML = contentToPrint;
            printWindow.document.close();
            printWindow.focus(); 
            setTimeout(() => { printWindow.print(); printWindow.close(); }, 500);
        }

        function imprimirCargasGeneric(divId, title) {
            const divToPrint = document.getElementById(divId);
            if (!divToPrint) return;
            
            const completedLoadsCards = divToPrint.querySelectorAll('.card .card-header:not(.bg-danger)');
            
            if (completedLoadsCards.length === 0) { alert(`Nenhuma carga concluída para imprimir na seção "${title}".`); return; }
            
            const printWindow = createPrintWindow('Imprimir: ' + title);
            let contentToPrint = `<h3>${title}</h3>`;
            completedLoadsCards.forEach(header => { contentToPrint += header.closest('.card.mb-3').outerHTML; });
            printWindow.document.body.innerHTML = contentToPrint;
            printWindow.document.close();
            printWindow.focus(); 
            setTimeout(() => { 
                printWindow.print(); 
                printWindow.close(); 
            }, 500);
        }

        function imprimirTocoIndividual(cf) {
            if (!gruposToco[cf]) { alert(`Nenhuma carga Toco encontrada para o CF: ${cf}`); return; }
            const grupo = gruposToco[cf]; const pedidos = grupo.pedidos;
            const totalKgFormatado = grupo.totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            const printWindow = createPrintWindow('Imprimir Carga Toco CF: ' + cf);
            let contentToPrint = `<h3>Carga Toco CF: ${cf} - Total: ${totalKgFormatado} kg</h3>` + createTable(pedidos);
            printWindow.document.body.innerHTML = contentToPrint;
            printWindow.document.close();
            printWindow.focus(); 
            setTimeout(() => { printWindow.print(); printWindow.close(); }, 500);
        }

        // --- INÍCIO DAS FUNÇÕES DE OTIMIZAÇÃO E UI AVANÇADA ---

        function imprimirCargaManualIndividual(loadId) {
            const load = activeLoads[loadId];
            const cardToPrint = document.getElementById(loadId);

            if (!load || !cardToPrint) {
                alert(`Erro: Carga com ID ${loadId} não encontrada para impressão.`);
                return;
            }

            const title = `Impressão - Carga Manual ${load.numero} (${load.vehicleType})`;
            const printWindow = createPrintWindow(title);
            
            // A classe 'no-print' no botão já cuida de escondê-lo na impressão.
            printWindow.document.body.innerHTML = `<h3>${title}</h3>` + cardToPrint.outerHTML;
            printWindow.document.close();
            printWindow.focus(); 
            setTimeout(() => { 
                printWindow.print(); 
                printWindow.close(); 
            }, 500);
        }

        function createSolution(itemsParaEmpacotar, vehicleType) {
            const MIN_KG = parseFloat(document.getElementById(`${vehicleType}MinCapacity`).value);
            const SOFT_MAX_KG = parseFloat(document.getElementById(`${vehicleType}MaxCapacity`).value);
            const SOFT_MAX_CUBAGE = parseFloat(document.getElementById(`${vehicleType}Cubage`).value);
            const HARD_MAX_KG = document.getElementById(`${vehicleType}HardMaxCapacity`) ? parseFloat(document.getElementById(`${vehicleType}HardMaxCapacity`).value) : SOFT_MAX_KG;
            const HARD_MAX_CUBAGE = document.getElementById(`${vehicleType}HardCubage`) ? parseFloat(document.getElementById(`${vehicleType}HardCubage`).value) : SOFT_MAX_CUBAGE;
            
            let loads = [];
            const specialClientNames = ['IRMAOS MUFFATO S.A', 'FINCO & FINCO', 'BOM DIA'];
            const isSpecialClient = (p) => p.Nome_Cliente && specialClientNames.includes(p.Nome_Cliente.toUpperCase().trim());
            
            let packableItems = [...itemsParaEmpacotar];
            let leftoverItems = [];

            packableItems.forEach(item => {
                if (item.totalKg > HARD_MAX_KG || item.totalCubagem > HARD_MAX_CUBAGE) {
                    leftoverItems.push(item); return;
                }
                
                let bestFit = null;

                for (const load of loads) {
                    const newKg = load.totalKg + item.totalKg;
                    const newCubage = load.totalCubagem + item.totalCubagem;
                    
                    const loadHasScheduledOrder = load.pedidos.some(p => p.Agendamento === 'Sim');
                    const itemHasScheduledOrder = item.pedidos.some(p => p.Agendamento === 'Sim');
                    if (loadHasScheduledOrder && itemHasScheduledOrder) continue;

                    const itemIsSpecial = item.isSpecial;
                    const loadAlreadyHasSpecial = load.pedidos.some(p => isSpecialClient(p));
                    if (itemIsSpecial && loadAlreadyHasSpecial) continue;

                    if (newKg <= HARD_MAX_KG && newCubage <= HARD_MAX_CUBAGE) {
                        const remainingCapacity = HARD_MAX_KG - newKg;
                        if (bestFit === null || remainingCapacity < bestFit.remainingCapacity) {
                            bestFit = { load: load, remainingCapacity: remainingCapacity };
                        }
                    }
                }

                if (bestFit) {
                    bestFit.load.pedidos.push(...item.pedidos);
                    bestFit.load.totalKg += item.totalKg;
                    bestFit.load.totalCubagem += item.totalCubagem;
                    bestFit.load.usedHardLimit = bestFit.load.totalKg > SOFT_MAX_KG || bestFit.load.totalCubagem > SOFT_MAX_CUBAGE;
                } else {
                    loads.push({
                        pedidos: [...item.pedidos],
                        totalKg: item.totalKg,
                        totalCubagem: item.totalCubagem,
                        usedHardLimit: (item.totalKg > SOFT_MAX_KG || item.totalCubagem > SOFT_MAX_CUBAGE)
                    });
                }
            });
            
            let finalLoads = [];
            let unplacedGroups = [];
            loads.forEach(load => {
                const hasPriority = load.pedidos.some(p => pedidosPrioritarios.includes(String(p.Num_Pedido)));
                const allowPriorityOverride = vehicleType !== 'tresQuartos';
                
                if (load.pedidos.length > 0 && (load.totalKg >= MIN_KG || (hasPriority && allowPriorityOverride))) {
                    finalLoads.push(load);
                } else {
                    const clientGroupsInFailedLoad = load.pedidos.reduce((acc, pedido) => {
                        const clienteId = normalizeClientId(pedido.Cliente);
                        if (!acc[clienteId]) {
                            acc[clienteId] = { pedidos: [], totalKg: 0, totalCubagem: 0, isSpecial: isSpecialClient(pedido) };
                        }
                        acc[clienteId].pedidos.push(pedido);
                        acc[clienteId].totalKg += parseFloat(String(pedido.Quilos_Saldo).replace(',', '.')) || 0;
                        acc[clienteId].totalCubagem += parseFloat(String(pedido.Cubagem).replace(',', '.')) || 0;
                        return acc;
                    }, {});
                    unplacedGroups.push(...Object.values(clientGroupsInFailedLoad));
                }
            });
            
            const leftovers = [...leftoverItems, ...unplacedGroups];
            return { loads: finalLoads, leftovers };
        }

        function runMultiStrategyOptimization(packableGroups, vehicleType) {
            const strategies = [
                { name: 'priority-weight-desc',
                  sorter: (a, b) => {
                    const aHasPrio = a.pedidos.some(p => pedidosPrioritarios.includes(String(p.Num_Pedido)));
                    const bHasPrio = b.pedidos.some(p => pedidosPrioritarios.includes(String(p.Num_Pedido)));
                    if (aHasPrio && !bHasPrio) return -1;
                    if (!aHasPrio && bHasPrio) return 1;
                    return b.totalKg - a.totalKg;
                  }
                },
                { name: 'scheduled-weight-desc',
                  sorter: (a, b) => {
                    const aHasSched = a.pedidos.some(p => p.Agendamento === 'Sim');
                    const bHasSched = b.pedidos.some(p => p.Agendamento === 'Sim');
                    if (aHasSched && !bHasSched) return -1;
                    if (!aHasSched && bHasSched) return 1;
                    return b.totalKg - a.totalKg;
                  }
                },
                { name: 'weight-desc', sorter: (a, b) => b.totalKg - a.totalKg },
                { name: 'weight-asc', sorter: (a, b) => a.totalKg - b.totalKg },
                { name: 'density-desc', sorter: (a, b) => b.density - a.density },
                { name: 'density-asc', sorter: (a, b) => a.density - b.density }
            ];

            let bestResult = null;

            for (const strategy of strategies) {
                const sortedGroups = [...packableGroups].sort(strategy.sorter);
                const result = createSolution(sortedGroups, vehicleType);
                
                const leftoverWeight = result.leftovers.reduce((sum, g) => sum + g.totalKg, 0);

                if (bestResult === null || leftoverWeight < bestResult.leftoverWeight) {
                    bestResult = { ...result, leftoverWeight: leftoverWeight, strategy: strategy.name };
                }
            }
            
            console.log(`Melhor estratégia para ${vehicleType}: ${bestResult.strategy} com ${bestResult.leftoverWeight.toFixed(2)}kg de sobra.`);
            return bestResult;
        }

        function refineLoadsWithSimpleFit(initialLoads, initialLeftovers) {
            let refinedLoads = JSON.parse(JSON.stringify(initialLoads));
            let remainingLeftovers = JSON.parse(JSON.stringify(initialLeftovers));

            for (let i = remainingLeftovers.length - 1; i >= 0; i--) {
                const leftoverGroup = remainingLeftovers[i];
                
                for (const load of refinedLoads) {
                    const vehicleType = load.vehicleType;
                    if (!vehicleType) continue; 
                    
                    const HARD_MAX_KG = document.getElementById(`${vehicleType}HardMaxCapacity`) ? parseFloat(document.getElementById(`${vehicleType}HardMaxCapacity`).value) : parseFloat(document.getElementById(`${vehicleType}MaxCapacity`).value);
                    const HARD_MAX_CUBAGE = document.getElementById(`${vehicleType}HardCubage`) ? parseFloat(document.getElementById(`${vehicleType}HardCubage`).value) : parseFloat(document.getElementById(`${vehicleType}Cubage`).value);

                    const newKg = load.totalKg + leftoverGroup.totalKg;
                    const newCubage = load.totalCubagem + leftoverGroup.totalCubagem;

                    if (newKg <= HARD_MAX_KG && newCubage <= HARD_MAX_CUBAGE) {
                        load.pedidos.push(...leftoverGroup.pedidos);
                        load.totalKg = newKg;
                        load.totalCubagem = newCubage;
                        
                        remainingLeftovers.splice(i, 1);
                        break; 
                    }
                }
            }
            return { refinedLoads, remainingLeftovers };
        }

        function separarCargasGeneric(routeOrRoutes, divId, title, vehicleType, buttonElement) {
            const resultadoDiv = document.getElementById(divId);
            
            const autoGeneratedContent = resultadoDiv.querySelector('.resultado-container');
            if (autoGeneratedContent) { autoGeneratedContent.remove(); }

            resultadoDiv.insertAdjacentHTML('beforeend', '<div id="spinner-temp-container" class="d-flex align-items-center justify-content-center p-5"><div class="spinner-border text-primary" role="status"></div><span class="ms-3">Analisando estratégias e montando cargas...</span></div>');

            if (buttonElement) {
                currentLeftoversForPrinting = [];
                const parentContainer = buttonElement.parentElement;
                parentContainer.querySelectorAll('button').forEach(btn => {
                    btn.classList.remove('active', 'btn-success', 'btn-primary', 'btn-warning', 'btn-secondary');
                    const originalColorClass = btn.id.includes('fiorino') ? 'success' : (btn.id.includes('van') ? 'primary' : 'warning');
                    btn.classList.add(`btn-outline-${originalColorClass}`);
                    btn.innerHTML = btn.innerHTML.replace('<i class="bi bi-check-circle-fill me-2"></i>', '');
                });
                const colorClass = vehicleType === 'fiorino' ? 'success' : (vehicleType === 'van' ? 'primary' : 'warning');
                buttonElement.classList.remove(`btn-outline-${colorClass}`);
                buttonElement.classList.add(`btn-${colorClass}`, 'active');
                buttonElement.innerHTML = `<i class="bi bi-check-circle-fill me-2"></i>${title}`;
            }

            setTimeout(() => {
                const spinner = document.getElementById('spinner-temp-container');
                if (spinner) spinner.remove();
                if (planilhaData.length === 0) {
                    resultadoDiv.innerHTML = '<p class="text-danger">Nenhum dado de planilha carregado.</p>'; return;
                }

                const routes = Array.isArray(routeOrRoutes) ? routeOrRoutes : [String(routeOrRoutes)];
                let pedidosRota = pedidosGeraisAtuais.filter(p => routes.includes(String(p.Cod_Rota)));

                const specialClientNames = ['IRMAOS MUFFATO S.A', 'FINCO & FINCO', 'BOM DIA'];
                const isSpecialClient = (p) => p.Nome_Cliente && specialClientNames.includes(p.Nome_Cliente.toUpperCase().trim());

                const clientGroupsMap = pedidosRota.reduce((acc, pedido) => {
                    const clienteId = normalizeClientId(pedido.Cliente);
                    if (!acc[clienteId]) { acc[clienteId] = { pedidos: [], totalKg: 0, totalCubagem: 0, isSpecial: isSpecialClient(pedido) }; }
                    acc[clienteId].pedidos.push(pedido);
                    acc[clienteId].totalKg += parseFloat(String(pedido.Quilos_Saldo).replace(',', '.')) || 0;
                    acc[clienteId].totalCubagem += parseFloat(String(pedido.Cubagem).replace(',', '.')) || 0;
                    return acc;
                }, {});
                const packableGroups = Object.values(clientGroupsMap);

                packableGroups.forEach(group => {
                    if (group.totalCubagem > 0) {
                        group.density = group.totalKg / group.totalCubagem;
                    } else {
                        group.density = Infinity; 
                    }
                });

                let initialResult = runMultiStrategyOptimization(packableGroups, vehicleType);

                initialResult.loads.forEach(load => {
                    load.vehicleType = vehicleType;
                });
                
                console.log(`Solução inicial encontrada com ${initialResult.leftovers.length} grupos sobrando. Iniciando fase de refinamento...`);
                const { refinedLoads, remainingLeftovers } = refineLoadsWithSimpleFit(initialResult.loads, initialResult.leftovers);
                console.log(`Refinamento finalizado. ${initialResult.leftovers.length - remainingLeftovers.length} grupos foram encaixados.`);

                let primaryLoads = refinedLoads;
                let leftoverGroups = remainingLeftovers;
                let secondaryLoads = [];
                let tertiaryLoads = [];

                if (vehicleType === 'fiorino' && leftoverGroups.length > 0) {
                    const fiorinoLeftoversResult = runMultiStrategyOptimization(leftoverGroups, 'fiorino');
                    if (fiorinoLeftoversResult.loads.length > 0) {
                        fiorinoLeftoversResult.loads.forEach(l => l.vehicleType = 'fiorino');
                        primaryLoads.push(...fiorinoLeftoversResult.loads);
                    }
                    leftoverGroups = fiorinoLeftoversResult.leftovers;

                    const totalLeftoverKg = leftoverGroups.reduce((sum, g) => sum + g.totalKg, 0);
                    const vanMin = parseFloat(document.getElementById('vanMinCapacity').value);
                    if (totalLeftoverKg >= vanMin && leftoverGroups.length > 0) {
                        const vanResult = runMultiStrategyOptimization(leftoverGroups, 'van');
                        vanResult.loads.forEach(l => l.vehicleType = 'van');
                        secondaryLoads = vanResult.loads;
                        leftoverGroups = vanResult.leftovers;
                    }
                }
                
                const totalFinalLeftoverKg = leftoverGroups.reduce((sum, g) => sum + g.totalKg, 0);
                const tresQuartosMin = parseFloat(document.getElementById('tresQuartosMinCapacity').value);
                if (totalFinalLeftoverKg >= tresQuartosMin && leftoverGroups.length > 0) {
                        const vehicleForTertiary = (vehicleType === 'fiorino' || vehicleType === 'van') ? 'tresQuartos' : '';
                        if(vehicleForTertiary) {
                            const tresQuartosResult = runMultiStrategyOptimization(leftoverGroups, vehicleForTertiary);
                            tresQuartosResult.loads.forEach(l => l.vehicleType = 'tresQuartos');
                            tertiaryLoads = tresQuartosResult.loads;
                            leftoverGroups = tresQuartosResult.leftovers;
                        }
                }

                currentLeftoversForPrinting = leftoverGroups.flatMap(group => group.pedidos);

                const allLoads = [ ...primaryLoads, ...secondaryLoads, ...tertiaryLoads ];

                allLoads.forEach((load, index) => {
                    load.numero = `${load.vehicleType.charAt(0).toUpperCase()}${index + 1}`;
                    const loadId = `${load.vehicleType}-${Date.now()}-${index}`;
                    load.id = loadId;
                    activeLoads[loadId] = load;
                });

                const vehicleInfo = {
                    fiorino: { name: 'Fiorino', colorClass: 'bg-success', textColor: 'text-white', icon: 'bi-box-seam-fill' },
                    van: { name: 'Van', colorClass: 'bg-primary', textColor: 'text-white', icon: 'bi-truck-front-fill' },
                    tresQuartos: { name: '3/4', colorClass: 'bg-warning', textColor: 'text-dark', icon: 'bi-truck-flatbed' }
                };
                
                let html = `<h5 class="mt-3">Cargas para <strong>${title}</strong></h5>`;
                
                const generatedLoads = allLoads.filter(l => l.pedidos.length > 0);
                if(generatedLoads.length === 0){
                        html += `<div class="alert alert-secondary">Nenhuma carga foi formada para esta rota.</div>`;
                } else {
                    generatedLoads.forEach(load => {
                        html += renderLoadCard(load, load.vehicleType, vehicleInfo[load.vehicleType]);
                    });
                }
                
                if (currentLeftoversForPrinting.length > 0) {
                    const finalLeftoverKg = currentLeftoversForPrinting.reduce((sum, p) => sum + (parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0), 0);
                    const manualLoadButton = `<button id="start-manual-load-btn" class="btn btn-success ms-auto no-print" onclick="startManualLoadBuilder()"><i class="bi bi-plus-circle-fill me-1"></i>Criar Carga Manual</button>`;
                    const printButtonHtml = `<button class="btn btn-info ms-2 no-print" onclick="imprimirSobras('Sobras Finais de ${title}')"><i class="bi bi-printer-fill me-1"></i>Imprimir</button>`;

                    html += `<div id="leftovers-card-${divId}" class="drop-zone-card" ondragover="dragOver(event)" ondragleave="dragLeave(event)" ondrop="drop(event)" data-load-id="leftovers" data-vehicle-type="leftovers">
                                 <h5 class="mt-4">Sobras Finais: ${finalLeftoverKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} kg</h5>
                                 <div class="card mb-3">
                                     <div class="card-header bg-danger text-white d-flex align-items-center">
                                         Pedidos Restantes
                                         <div class="ms-auto">${manualLoadButton}${printButtonHtml}</div>
                                     </div>
                                     <div class="card-body">${createTable(currentLeftoversForPrinting, ['Num_Pedido', 'Quilos_Saldo', 'Agendamento', 'Cubagem', 'Predat', 'Cliente', 'Nome_Cliente', 'Cidade', 'CF'], 'leftovers')}</div>
                                 </div>
                             </div>`;
                }
                resultadoDiv.innerHTML = `<div class="resultado-container">${html}</div>`;
            }, 50);
        }
        
        function renderLoadCard(load, vehicleType, vInfo) {
            load.pedidos.sort((a, b) => {
                const clienteA = String(a.Cliente); const clienteB = String(b.Cliente);
                const pedidoA = String(a.Num_Pedido); const pedidoB = String(b.Num_Pedido);
                if (clienteA < clienteB) return -1; if (clienteA > clienteB) return 1;
                return pedidoA.localeCompare(pedidoB);
            });

            const totalKgFormatado = load.totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            const totalCubagemFormatado = (load.totalCubagem || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            const isPriorityLoad = load.pedidos.some(p => pedidosPrioritarios.includes(String(p.Num_Pedido)));
            const priorityBadge = isPriorityLoad ? '<span class="badge bg-light text-dark ms-3">CARGA COM PRIORIDADE</span>' : '';
            const hardLimitBadge = load.usedHardLimit ? '<span class="badge bg-danger-subtle text-danger-emphasis ms-3"><i class="bi bi-exclamation-triangle-fill"></i> CAPACIDADE EXTRA</span>' : '';

            let maxKg = 0;
            if (vehicleType === 'fiorino') maxKg = parseFloat(document.getElementById('fiorinoHardMaxCapacity').value);
            else if (vehicleType === 'van') maxKg = parseFloat(document.getElementById('vanHardMaxCapacity').value);
            else if (vehicleType === 'tresQuartos') maxKg = parseFloat(document.getElementById('tresQuartosMaxCapacity').value);
            else if (vehicleType === 'toco') maxKg = parseFloat(document.getElementById('tocoMaxCapacity').value);

            const isOverloaded = maxKg > 0 && load.totalKg > maxKg;
            const pesoPercentual = maxKg > 0 ? (load.totalKg / maxKg) * 100 : 0;
            let progressColor = 'bg-success';
            if (isOverloaded || pesoPercentual > 100) progressColor = 'bg-danger';
            else if (pesoPercentual > 95) progressColor = 'bg-danger';
            else if (pesoPercentual > 75) progressColor = 'bg-warning';

            const progressBar = `
                <div class="progress mt-2" role="progressbar" aria-label="Capacidade da carga" aria-valuenow="${pesoPercentual}" aria-valuemin="0" aria-valuemax="100" style="height: 10px;">
                  <div class="progress-bar ${progressColor}" style="width: ${Math.min(pesoPercentual, 100)}%"></div>
                </div>`;
            
            const headerColorClass = isOverloaded ? 'bg-danger' : vInfo.colorClass;
            
            const printButton = String(load.id).startsWith('manual-') ? `<button class="btn btn-sm btn-outline-info mb-3 no-print" onclick="imprimirCargaManualIndividual('${load.id}')"><i class="bi bi-printer-fill me-1"></i>Imprimir Esta Carga</button>` : '';

            return `<div id="${load.id}" class="card mb-3 drop-zone-card ${isPriorityLoad ? 'border-primary' : ''}" ondragover="dragOver(event)" ondragleave="dragLeave(event)" ondrop="drop(event)" data-load-id="${load.id}" data-vehicle-type="${vehicleType}"><div class="card-header ${headerColorClass} ${vInfo.textColor}"><i class="bi ${vInfo.icon} me-2"></i>${vInfo.name} #${load.numero} - <i class="bi bi-database me-1"></i>Total: ${totalKgFormatado} kg / <i class="bi bi-rulers me-1"></i>${totalCubagemFormatado} m³ ${priorityBadge} ${hardLimitBadge}</div><div class="card-body">${printButton}${progressBar}${createTable(load.pedidos, null, load.id)}</div></div>`;
        }
        
        function separarCargasFiorino(routes, divId, title, buttonElement) { separarCargasGeneric(routes, divId, title, 'fiorino', buttonElement); }
        function separarCargasVan(routes, divId, title, buttonElement) { separarCargasGeneric(routes, divId, title, 'van', buttonElement); }
        function separarCargas34(routes, divId, title, buttonElement) { separarCargasGeneric(routes, divId, title, 'tresQuartos', buttonElement); }

        function displayToco(div, grupos) {
            if (Object.keys(grupos).length === 0) { div.innerHTML = '<div class="alert alert-secondary text-center">Nenhuma carga "Toco" encontrada.</div>'; return; }
            
            const maxKg = parseFloat(document.getElementById('tocoMaxCapacity').value);
            let accordionHtml = '<div class="accordion accordion-flush" id="accordionToco">';
            
            Object.keys(grupos).sort().forEach((cf, index) => {
                const grupo = grupos[cf]; 
                const loadId = `toco-${cf}`;
                grupo.id = loadId;
                grupo.vehicleType = 'toco';
                activeLoads[loadId] = grupo;

                const pedidos = grupo.pedidos;
                pedidos.sort((a, b) => {
                    const clienteA = String(a.Cliente); const clienteB = String(b.Cliente);
                    const pedidoA = String(a.Num_Pedido); const pedidoB = String(b.Num_Pedido);
                    if (clienteA < clienteB) return -1; if (clienteA > clienteB) return 1;
                    return pedidoA.localeCompare(pedidoB);
                });
                const totalKgFormatado = grupo.totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                const isOverloaded = grupo.totalKg > maxKg;
                const weightBadge = isOverloaded
                    ? `<span class="badge bg-danger ms-2"><i class="bi bi-exclamation-triangle-fill me-1"></i>${totalKgFormatado} kg (ACIMA DO PESO!)</span>`
                    : `<span class="badge bg-info ms-2"><i class="bi bi-database me-1"></i>${totalKgFormatado} kg</span>`;
                
                const pesoPercentual = (grupo.totalKg / maxKg) * 100;
                let progressColor = 'bg-success';
                if (isOverloaded || pesoPercentual > 100) progressColor = 'bg-danger';
                else if (pesoPercentual > 95) progressColor = 'bg-danger';
                else if (pesoPercentual > 75) progressColor = 'bg-warning';
                const progressBar = `<div class="progress mb-3" role="progressbar" style="height: 10px;"><div class="progress-bar ${progressColor}" style="width: ${Math.min(pesoPercentual, 100)}%"></div></div>`;
                const headerColorClass = isOverloaded ? 'bg-danger' : '';

                accordionHtml += `<div class="accordion-item"><h2 class="accordion-header" id="headingToco${index}"><button class="accordion-button collapsed ${headerColorClass}" type="button" data-bs-toggle="collapse" data-bs-target="#collapseToco${index}"><strong>CF: ${cf}</strong> &nbsp; <span class="badge bg-secondary ms-2"><i class="bi bi-box me-1"></i>${pedidos.length}</span> ${weightBadge}</button></h2><div id="collapseToco${index}" class="accordion-collapse collapse" data-bs-parent="#accordionToco"><div class="accordion-body drop-zone-card" id="${loadId}" ondragover="dragOver(event)" ondragleave="dragLeave(event)" ondrop="drop(event)" data-load-id="${loadId}" data-vehicle-type="toco"><button class="btn btn-sm btn-outline-info mb-3 no-print" onclick="imprimirTocoIndividual('${cf}')"><i class="bi bi-printer-fill me-1"></i>Imprimir</button>${progressBar}${createTable(pedidos, null, loadId)}</div></div></div>`;
            });
            accordionHtml += '</div>'; div.innerHTML = accordionHtml;
        }

        function montarCargaEspecial() {
            const resultadoDiv = document.getElementById('resultado-carga-especial');
            const input = document.getElementById('pedidosEspeciaisInput');
            resultadoDiv.innerHTML = '';

            if (planilhaData.length === 0) {
                resultadoDiv.innerHTML = '<div class="alert alert-warning">Por favor, carregue a planilha primeiro.</div>';
                return;
            }

            const numerosPedidos = input.value.split('\n')
                .map(n => n.trim())
                .filter(n => n !== '');

            if (numerosPedidos.length === 0) {
                resultadoDiv.innerHTML = '<div class="alert alert-warning">Nenhum número de pedido foi inserido.</div>';
                return;
            }

            const pedidosSelecionados = [];
            const pedidosNaoEncontrados = [];

            numerosPedidos.forEach(num => {
                const pedidoEncontrado = planilhaData.find(p => String(p.Num_Pedido) === num);
                if (pedidoEncontrado) {
                    pedidosSelecionados.push(pedidoEncontrado);
                } else {
                    pedidosNaoEncontrados.push(num);
                }
            });

            if (pedidosNaoEncontrados.length > 0) {
                resultadoDiv.innerHTML = `<div class="alert alert-danger">Os seguintes pedidos não foram encontrados na planilha: ${pedidosNaoEncontrados.join(', ')}.</div>`;
                return;
            }

            const totalKg = pedidosSelecionados.reduce((sum, p) => sum + (parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0), 0);
            const totalCubagem = pedidosSelecionados.reduce((sum, p) => sum + (parseFloat(String(p.Cubagem).replace(',', '.')) || 0), 0);

            const veiculos = [
                { tipo: 'fiorino', nome: 'Fiorino', maxKg: parseFloat(document.getElementById('fiorinoHardMaxCapacity').value), maxCubagem: parseFloat(document.getElementById('fiorinoHardCubage').value) },
                { tipo: 'van', nome: 'Van', maxKg: parseFloat(document.getElementById('vanHardMaxCapacity').value), maxCubagem: parseFloat(document.getElementById('vanHardCubage').value) },
                { tipo: 'tresQuartos', nome: '3/4', maxKg: parseFloat(document.getElementById('tresQuartosMaxCapacity').value), maxCubagem: parseFloat(document.getElementById('tresQuartosCubage').value) },
            ];

            let veiculoEscolhido = null;

            for (const veiculo of veiculos) {
                if (totalKg <= veiculo.maxKg && totalCubagem <= veiculo.maxCubagem) {
                    veiculoEscolhido = veiculo;
                    break;
                }
            }
            
            if (veiculoEscolhido) {
                pedidosEspeciaisProcessados.clear();
                pedidosSelecionados.forEach(p => pedidosEspeciaisProcessados.add(String(p.Num_Pedido)));

                const loadId = 'carga-especial-1';
                const load = {
                    id: loadId,
                    pedidos: pedidosSelecionados,
                    totalKg: totalKg,
                    totalCubagem: totalCubagem,
                    numero: 'Especial',
                    vehicleType: veiculoEscolhido.tipo
                };
                activeLoads[loadId] = load;
                
                const vehicleInfo = {
                    fiorino: { name: 'Fiorino', colorClass: 'bg-success', textColor: 'text-white', icon: 'bi-box-seam-fill' },
                    van: { name: 'Van', colorClass: 'bg-primary', textColor: 'text-white', icon: 'bi-truck-front-fill' },
                    tresQuartos: { name: '3/4', colorClass: 'bg-warning', textColor: 'text-dark', icon: 'bi-truck-flatbed' }
                };

                resultadoDiv.innerHTML = `
                    <div class="alert alert-success d-flex justify-content-between align-items-center">
                        <div>
                            <strong>Carga Especial montada com sucesso!</strong> Estes ${pedidosSelecionados.length} pedidos foram agrupados em um(a) <strong>${veiculoEscolhido.nome}</strong>.
                            <br>Eles serão removidos da análise geral quando você clicar em "Processar Cargas".
                        </div>
                        <button class="btn btn-light btn-sm no-print" onclick="imprimirCargaEspecial()"><i class="bi bi-printer-fill me-1"></i> Imprimir Carga</button>
                    </div>
                    ${renderLoadCard(load, veiculoEscolhido.tipo, vehicleInfo[veiculoEscolhido.tipo])}
                `;
            } else {
                pedidosEspeciaisProcessados.clear();
                resultadoDiv.innerHTML = `
                    <div class="alert alert-danger">
                        <strong>Não foi possível montar a carga.</strong> O total dos pedidos selecionados excede a capacidade de todos os veículos disponíveis.
                        <ul>
                            <li><strong>Peso Total:</strong> ${totalKg.toFixed(2)} kg</li>
                            <li><strong>Cubagem Total:</strong> ${totalCubagem.toFixed(2)} m³</li>
                        </ul>
                    </div>
                `;
            }
        }

        function imprimirCargaEspecial() {
            const resultadoDiv = document.getElementById('resultado-carga-especial');
            const cardToPrint = resultadoDiv.querySelector('.card');

            if (!cardToPrint) {
                alert("Nenhuma Carga Especial para imprimir.");
                return;
            }

            const title = 'Carga Especial';
            const printWindow = createPrintWindow(title);
            
            let contentToPrint = `<h3>${title}</h3>` + cardToPrint.outerHTML;
            
            printWindow.document.body.innerHTML = contentToPrint;
            printWindow.document.close();
            printWindow.focus(); 
            setTimeout(() => { 
                printWindow.print(); 
                printWindow.close(); 
            }, 500);
        }
        
        function highlightClientRows(event) {
            const clickedRow = event.target.closest('tr');
            if (!clickedRow || !clickedRow.dataset.clienteId) return;

            const clienteId = clickedRow.dataset.clienteId;
            const isAlreadyHighlighted = clickedRow.classList.contains('client-highlight');

            document.querySelectorAll('tr.client-highlight').forEach(row => {
                row.classList.remove('client-highlight');
            });

            if (!isAlreadyHighlighted) {
                document.querySelectorAll(`tr[data-cliente-id='${clienteId}']`).forEach(row => {
                    row.classList.add('client-highlight');
                });
            }
        }

        function displayResumoGeral(stats) {
            const container = document.getElementById('card-resumo-geral-container');
            const nf = (num) => num.toLocaleString('pt-BR');
            const kf = (num) => num.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            const html = `
            <div class="card">
                <div class="card-header"><i class="bi bi-bar-chart-line-fill me-2"></i>Resumo do Processamento</div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <h6 class="text-white-50">TOTAIS DA PLANILHA</h6>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item bg-transparent d-flex justify-content-between align-items-center">Pedidos no Arquivo <span class="badge bg-primary rounded-pill">${nf(stats.totalPlanilha)}</span></li>
                                <li class="list-group-item bg-transparent d-flex justify-content-between align-items-center">Peso Total no Arquivo <span class="badge bg-primary rounded-pill">${kf(stats.pesoTotal)} kg</span></li>
                            </ul>
                        </div>
                        <div class="col-md-4">
                            <h6 class="text-white-50">PEDIDOS PRÉ-PROCESSADOS</h6>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item bg-transparent d-flex justify-content-between align-items-center">Carga Especial<span class="badge bg-info rounded-pill">${nf(stats.pedidosEspeciais)}</span></li>
                                <li class="list-group-item bg-transparent d-flex justify-content-between align-items-center">Bloqueados Manualmente<span class="badge bg-danger rounded-pill">${nf(stats.pedidosBloqueados)}</span></li>
                                <li class="list-group-item bg-transparent d-flex justify-content-between align-items-center">Cargas Toco (pedidos)<span class="badge bg-secondary rounded-pill">${nf(stats.pedidosToco)}</span></li>
                                <li class="list-group-item bg-transparent d-flex justify-content-between align-items-center">Cargas 3/4 Auto (pedidos)<span class="badge bg-warning rounded-pill">${nf(stats.pedidos34Auto)}</span></li>
                            </ul>
                        </div>
                        <div class="col-md-4">
                            <h6 class="text-white-50">DISPONÍVEL PARA MONTAGEM</h6>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item bg-transparent d-flex justify-content-between align-items-center">Filtrados (CF Num./Rota 1)<span class="badge bg-secondary rounded-pill">${nf(stats.pedidosFiltrados)}</span></li>
                                <li class="list-group-item bg-transparent d-flex justify-content-between align-items-center"><strong>Pedidos Disponíveis</strong><span class="badge bg-success rounded-pill"><strong>${nf(stats.pedidosDisponiveis)}</strong></span></li>
                                <li class="list-group-item bg-transparent d-flex justify-content-between align-items-center"><strong>Peso Disponível</strong><span class="badge bg-success rounded-pill"><strong>${kf(stats.pesoDisponivel)} kg</strong></span></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>`;
            container.innerHTML = html;
            container.style.display = 'block';
        }
        
        function dragStart(event, pedidoId, clienteId, sourceId) {
            event.dataTransfer.setData("text/plain", JSON.stringify({ pedidoId, clienteId, sourceId }));
            event.dataTransfer.effectAllowed = "move";
        }

        function dragOver(event) {
            event.preventDefault();
            event.dataTransfer.dropEffect = "move";
            const dropZoneCard = event.target.closest('.drop-zone-card');
            if (dropZoneCard) {
                dropZoneCard.classList.add('drag-over');
            }
        }

        function dragLeave(event) {
            const dropZoneCard = event.target.closest('.drop-zone-card');
            if (dropZoneCard) {
                dropZoneCard.classList.remove('drag-over');
            }
        }
        
        function drop(event) {
            event.preventDefault();
            const dropZoneCard = event.target.closest('.drop-zone-card');
            if (!dropZoneCard) return;
            dropZoneCard.classList.remove('drag-over');

            const { clienteId, sourceId } = JSON.parse(event.dataTransfer.getData("text/plain"));
            const targetId = dropZoneCard.dataset.loadId;

            if (sourceId === targetId) return; 

            let sourceLoad, targetLoad;
            let sourceIsLeftovers = sourceId === 'leftovers';
            let targetIsLeftovers = targetId === 'leftovers';
            let sourceIsGeral = sourceId === 'geral';
            let targetIsManualBuilder = targetId === 'manual-builder';
            let sourceIsManualBuilder = sourceId === 'manual-builder';

            if (sourceIsLeftovers) {
                sourceLoad = { pedidos: currentLeftoversForPrinting };
            } else if (sourceIsGeral) {
                sourceLoad = { pedidos: pedidosGeraisAtuais };
            } else {
                sourceLoad = activeLoads[sourceId];
            }

            if (targetIsLeftovers) {
                targetLoad = { pedidos: currentLeftoversForPrinting, totalKg: 0, totalCubagem: 0 };
            } else if (targetIsManualBuilder) {
                targetLoad = manualLoadInProgress;
            } else {
                targetLoad = activeLoads[targetId];
            }
            
            if (!sourceLoad || !targetLoad) {
                console.error("ERRO: Carga de origem ou destino não encontrada.", { sourceId, targetId, activeLoads });
                return;
            }

            const clientOrdersToMove = sourceLoad.pedidos.filter(p => normalizeClientId(p.Cliente) === clienteId);
            if (clientOrdersToMove.length === 0) return;

            const orderIdsToMove = new Set(clientOrdersToMove.map(p => p.Num_Pedido));
            const clientBlockKg = clientOrdersToMove.reduce((sum, p) => sum + (parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0), 0);
            const clientBlockCubagem = clientOrdersToMove.reduce((sum, p) => sum + (parseFloat(String(p.Cubagem).replace(',', '.')) || 0), 0);
            
            if (!targetIsLeftovers) {
                const targetVehicleType = targetLoad.vehicleType;
                if (targetVehicleType) { 
                    let maxKg = Infinity, maxCubagem = Infinity;
                    if (targetVehicleType === 'toco') {
                        maxKg = parseFloat(document.getElementById('tocoMaxCapacity').value);
                        maxCubagem = parseFloat(document.getElementById('tocoCubage').value);
                    } else if (document.getElementById(`${targetVehicleType}MaxCapacity`)) {
                        maxKg = parseFloat(document.getElementById(`${targetVehicleType}HardMaxCapacity`)?.value || document.getElementById(`${targetVehicleType}MaxCapacity`).value);
                        maxCubagem = parseFloat(document.getElementById(`${targetVehicleType}HardCubage`)?.value || document.getElementById(`${targetVehicleType}Cubage`).value);
                    }

                    if ((targetLoad.totalKg + clientBlockKg > maxKg) || (targetLoad.totalCubagem + clientBlockCubagem > maxCubagem)) {
                        const overWeight = (targetLoad.totalKg + clientBlockKg) - maxKg;
                        const confirmation = confirm(`AVISO: Mover este grupo excede a capacidade do veículo em ${overWeight.toFixed(2)} kg.\n\nDeseja continuar mesmo assim?`);
                        if (!confirmation) return;
                    }
                }
            }
            
            if (sourceIsLeftovers) {
                currentLeftoversForPrinting = sourceLoad.pedidos.filter(p => !orderIdsToMove.has(p.Num_Pedido));
            } else if (sourceIsGeral) {
                pedidosGeraisAtuais = sourceLoad.pedidos.filter(p => !orderIdsToMove.has(p.Num_Pedido));
            } else {
                sourceLoad.pedidos = sourceLoad.pedidos.filter(p => !orderIdsToMove.has(p.Num_Pedido));
                sourceLoad.totalKg -= clientBlockKg;
                sourceLoad.totalCubagem -= clientBlockCubagem;
            }

            if (targetIsLeftovers) {
                currentLeftoversForPrinting.push(...clientOrdersToMove);
            } else {
                targetLoad.pedidos.push(...clientOrdersToMove);
                targetLoad.totalKg += clientBlockKg;
                targetLoad.totalCubagem += clientBlockCubagem;
            }

            if (sourceIsManualBuilder) {
                updateManualBuilderUI();
            } else {
                updateLoadUI(sourceId);
            }
            
            if (targetIsManualBuilder) {
                updateManualBuilderUI();
            } else {
                updateLoadUI(targetId);
            }
        }


        function updateLoadUI(loadId) {
            const activeTabPane = document.querySelector('.tab-pane.active');
            if (!activeTabPane && (loadId === 'leftovers' || loadId === 'geral')) {
                console.error("Nenhuma aba ativa encontrada para atualizar a UI.");
                return;
            }
            
            if (loadId === 'leftovers' || loadId === 'geral') {
                const leftoversCard = activeTabPane.querySelector('[data-load-id="leftovers"]');
                const geraisDiv = document.getElementById('resultado-geral');

                // Atualiza a lista de Pedidos Disponíveis
                const gruposGerais = pedidosGeraisAtuais.reduce((acc, p) => {
                    const rota = p.Cod_Rota; if (!acc[rota]) { acc[rota] = { pedidos: [], totalKg: 0 }; } acc[rota].pedidos.push(p); acc[rota].totalKg += parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0; return acc;
                }, {});
                if(geraisDiv) displayGerais(geraisDiv, gruposGerais);

                // Atualiza a lista de Sobras Finais, se ela existir na aba atual
                if (!leftoversCard) return;

                if (currentLeftoversForPrinting.length === 0) {
                    leftoversCard.innerHTML = `
                        <h5 class="mt-4">Sobras Finais: 0,00 kg</h5>
                        <div class="card mb-3">
                            <div class="card-header bg-danger text-white d-flex align-items-center">
                                Pedidos Restantes
                            </div>
                            <div class="card-body">
                                <p class="text-muted text-center py-3">Todos os pedidos foram alocados.</p>
                            </div>
                        </div>`;
                } else {
                    const totalKgUnassigned = currentLeftoversForPrinting.reduce((sum, p) => sum + (parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0), 0);
                    const manualLoadButton = `<button id="start-manual-load-btn" class="btn btn-success ms-auto no-print" onclick="startManualLoadBuilder()"><i class="bi bi-plus-circle-fill me-1"></i>Criar Carga Manual</button>`;
                    const printButtonHtml = `<button class="btn btn-info ms-2 no-print" onclick="imprimirSobras('Sobras Finais')"><i class="bi bi-printer-fill me-1"></i>Imprimir</button>`;
                    leftoversCard.innerHTML = `
                        <h5 class="mt-4">Sobras Finais: ${totalKgUnassigned.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} kg</h5>
                        <div class="card mb-3">
                            <div class="card-header bg-danger text-white d-flex align-items-center">
                                Pedidos Restantes
                                <div class="ms-auto">${manualLoadButton}${printButtonHtml}</div>
                            </div>
                            <div class="card-body">${createTable(currentLeftoversForPrinting, ['Num_Pedido', 'Quilos_Saldo', 'Agendamento', 'Cubagem', 'Predat', 'Cliente', 'Nome_Cliente', 'Cidade', 'CF'], 'leftovers')}</div>
                        </div>`;
                }
                return;
            }

            const load = activeLoads[loadId];
            if (!load) return;

            const cardElement = document.getElementById(loadId);
            if (!cardElement) return;

            const vInfoMap = {
                fiorino: { name: 'Fiorino', colorClass: 'bg-success', textColor: 'text-white', icon: 'bi-box-seam-fill' },
                van: { name: 'Van', colorClass: 'bg-primary', textColor: 'text-white', icon: 'bi-truck-front-fill' },
                tresQuartos: { name: '3/4', colorClass: 'bg-warning', textColor: 'text-dark', icon: 'bi-truck-flatbed' },
                toco: { name: 'Toco', colorClass: 'bg-dark', textColor: 'text-white', icon: 'bi-inboxes-fill'}
            };
            const vInfo = vInfoMap[load.vehicleType];
            
            if(load.vehicleType !== 'toco') {
                cardElement.outerHTML = renderLoadCard(load, load.vehicleType, vInfo);
            } else {
                const accordionBody = cardElement;
                const progressBarContainer = accordionBody.querySelector('.progress');
                const tableContainer = accordionBody.querySelector('.table-responsive');
                const headerButton = accordionBody.closest('.accordion-item').querySelector('.accordion-button');
                
                const maxKg = parseFloat(document.getElementById('tocoMaxCapacity').value);
                const totalKgFormatado = load.totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                const isOverloaded = load.totalKg > maxKg;
                const pesoPercentual = (load.totalKg / maxKg) * 100;
                let progressColor = isOverloaded || pesoPercentual > 100 ? 'bg-danger' : (pesoPercentual > 75 ? 'bg-warning' : 'bg-success');
                
                progressBarContainer.querySelector('.progress-bar').style.width = `${Math.min(pesoPercentual, 100)}%`;
                progressBarContainer.querySelector('.progress-bar').className = `progress-bar ${progressColor}`;
                if(tableContainer) {
                    tableContainer.outerHTML = createTable(load.pedidos, null, loadId);
                } else {
                    accordionBody.insertAdjacentHTML('beforeend', createTable(load.pedidos, null, loadId));
                }

                const weightBadge = headerButton.querySelector('.badge.bg-info, .badge.bg-danger');
                if(weightBadge) {
                    weightBadge.outerHTML = isOverloaded
                    ? `<span class="badge bg-danger ms-2"><i class="bi bi-exclamation-triangle-fill me-1"></i>${totalKgFormatado} kg (ACIMA DO PESO!)</span>`
                    : `<span class="badge bg-info ms-2"><i class="bi bi-database me-1"></i>${totalKgFormatado} kg</span>`;
                }
                headerButton.classList.toggle('bg-danger', isOverloaded);
            }
        }
        
        function startManualLoadBuilder() {
            if (document.getElementById('manual-load-builder-wrapper')) return; 

            manualLoadInProgress = {
                pedidos: [], totalKg: 0, totalCubagem: 0, vehicleType: 'fiorino' 
            };
            
            const activeTabPane = document.querySelector('.tab-pane.active');
            if (!activeTabPane) {
                alert("Erro: Nenhuma aba de trabalho está ativa.");
                return;
            }

            const builderWrapper = document.createElement('div');
            builderWrapper.id = 'manual-load-builder-wrapper';
            builderWrapper.className = 'p-3 border-top border-secondary'; 
            
            builderWrapper.innerHTML = `
                <div class="card border-info shadow-lg" id="manual-load-card">
                    <div class="card-header bg-info text-dark"><h5 class="mb-0"><i class="bi bi-tools me-2"></i>Painel de Montagem de Carga Manual</h5></div>
                    <div class="card-body">
                        <div class="row align-items-center mb-3">
                            <div class="col-md-4"><label for="manualVehicleType" class="form-label">Montar para o veículo:</label><select id="manualVehicleType" class="form-select" onchange="updateManualBuilderUI()"><option value="fiorino">Fiorino</option><option value="van">Van</option><option value="tresQuartos">3/4</option></select></div>
                            <div class="col-md-5"><p class="mb-1"><strong>Peso Total:</strong> <span id="manualLoadKg">0,00</span> kg</p><p class="mb-0"><strong>Cubagem Total:</strong> <span id="manualLoadCubage">0,00</span> m³</p></div>
                            <div class="col-md-3 text-end"><button class="btn btn-danger me-2" onclick="cancelManualLoad()"><i class="bi bi-x-circle me-1"></i>Cancelar</button><button id="finalizeManualLoadBtn" class="btn btn-success" onclick="finalizeManualLoad()" disabled><i class="bi bi-check-circle me-1"></i>Criar</button></div>
                        </div>
                        <div id="manual-progress-bar-container"></div>
                        <div id="manual-drop-zone" class="p-3 border rounded drop-zone-card" style="background-color: var(--dark-bg); min-height: 150px;" ondragover="dragOver(event)" ondragleave="dragLeave(event)" ondrop="drop(event)" data-load-id="manual-builder">
                            <p class="text-muted text-center" id="manual-drop-text">Arraste os pedidos da lista de "Sobras" para cá.</p>
                            <div id="manual-load-table-container"></div>
                        </div>
                    </div>
                </div>`;
            
            activeTabPane.appendChild(builderWrapper);
            
            const startBtn = activeTabPane.querySelector('#start-manual-load-btn');
            if (startBtn) startBtn.style.display = 'none';
            updateManualBuilderUI(); 
        }

        function updateManualBuilderUI() {
            if (!manualLoadInProgress) return;

            const vehicleType = document.getElementById('manualVehicleType').value;
            manualLoadInProgress.vehicleType = vehicleType;

            document.getElementById('manualLoadKg').textContent = manualLoadInProgress.totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById('manualLoadCubage').textContent = manualLoadInProgress.totalCubagem.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            const tableContainer = document.getElementById('manual-load-table-container');
            const dropText = document.getElementById('manual-drop-text');
            if (manualLoadInProgress.pedidos.length > 0) {
                tableContainer.innerHTML = createTable(manualLoadInProgress.pedidos, null, 'manual-builder');
                dropText.style.display = 'none';
            } else {
                tableContainer.innerHTML = '';
                dropText.style.display = 'block';
            }

            const minKg = parseFloat(document.getElementById(`${vehicleType}MinCapacity`).value);
            const maxKg = parseFloat(document.getElementById(`${vehicleType}HardMaxCapacity`)?.value || document.getElementById(`${vehicleType}MaxCapacity`).value);
            
            const finalizeBtn = document.getElementById('finalizeManualLoadBtn');
            finalizeBtn.disabled = manualLoadInProgress.totalKg < minKg;
            
            const pesoPercentual = maxKg > 0 ? (manualLoadInProgress.totalKg / maxKg) * 100 : 0;
            let progressColor = 'bg-secondary';
            if(manualLoadInProgress.totalKg >= minKg) progressColor = 'bg-success';
            if (pesoPercentual > 75) progressColor = 'bg-warning';
            if (pesoPercentual > 95) progressColor = 'bg-danger';

            document.getElementById('manual-progress-bar-container').innerHTML = `
                <div class="progress mb-3" role="progressbar" style="height: 10px;">
                    <div class="progress-bar ${progressColor}" style="width: ${Math.min(pesoPercentual, 100)}%"></div>
                </div>
            `;
        }

        function finalizeManualLoad() {
            if (!manualLoadInProgress || manualLoadInProgress.pedidos.length === 0) return;

            const vehicleType = manualLoadInProgress.vehicleType;
            const newLoad = {
                ...manualLoadInProgress,
                id: `manual-${vehicleType}-${Date.now()}`,
                numero: `M-${Object.keys(activeLoads).filter(k => k.startsWith('manual')).length + 1}`
            };

            activeLoads[newLoad.id] = newLoad;
            
            const vehicleInfo = {
                fiorino: { name: 'Fiorino', colorClass: 'bg-success', textColor: 'text-white', icon: 'bi-box-seam-fill' },
                van: { name: 'Van', colorClass: 'bg-primary', textColor: 'text-white', icon: 'bi-truck-front-fill' },
                tresQuartos: { name: '3/4', colorClass: 'bg-warning', textColor: 'text-dark', icon: 'bi-truck-flatbed' }
            };

            const newCardHTML = renderLoadCard(newLoad, vehicleType, vehicleInfo[vehicleType]);
            
            const activeTabPane = document.querySelector('.tab-pane.active');
            const resultContainer = activeTabPane ? activeTabPane.querySelector('[id^="resultado-"]') : null;

            if(resultContainer) {
               resultContainer.insertAdjacentHTML('beforeend', newCardHTML);
               alert(`Carga manual ${newLoad.numero} criada com sucesso para ${vehicleInfo[vehicleType].name} e adicionada à aba atual!`);
            }

            const builderWrapper = document.getElementById('manual-load-builder-wrapper');
            if (builderWrapper) builderWrapper.remove();
            manualLoadInProgress = null;
            
            const startBtn = activeTabPane.querySelector('#start-manual-load-btn');
            if(startBtn) startBtn.style.display = 'inline-block';
            
            setTimeout(() => {
                const newCardElement = document.getElementById(newLoad.id);
                if(newCardElement) {
                    newCardElement.scrollIntoView({ behavior: 'smooth', block: 'center'});
                    newCardElement.classList.add('border-info');
                    setTimeout(() => newCardElement.classList.remove('border-info'), 2500);
                }
            }, 300);
        }

        function cancelManualLoad() {
             if (!manualLoadInProgress) return;
             
             currentLeftoversForPrinting.push(...manualLoadInProgress.pedidos);
             
             const builderWrapper = document.getElementById('manual-load-builder-wrapper');
             if (builderWrapper) builderWrapper.remove();
             manualLoadInProgress = null;

             updateLoadUI('leftovers'); 
             
             const activeTabPane = document.querySelector('.tab-pane.active');
             const startBtn = activeTabPane ? activeTabPane.querySelector('#start-manual-load-btn') : null;
             if(startBtn) startBtn.style.display = 'inline-block';
        }

        // --- FUNÇÕES DE LOGIN, CADASTRO E CONTROLE DE UI ---

        const loginContainer = document.getElementById('login-container');
        const dashboardContent = document.getElementById('dashboard-content');
        const userInfoDiv = document.getElementById('user-info');
        const logoutButton = document.getElementById('logout-button');
        
        const loginFormContainer = document.getElementById('login-form-container');
        const signupFormContainer = document.getElementById('signup-form-container');
        const loginForm = document.getElementById('login-form');
        const signupForm = document.getElementById('signup-form');
        
        const toggleToSignup = document.getElementById('toggle-to-signup');
        const toggleToLogin = document.getElementById('toggle-to-login');
        const authMessage = document.getElementById('auth-message');

        const setFormProcessing = (form, isProcessing) => {
            const button = form.querySelector('button[type="submit"]');
            const buttonText = button.querySelector('.button-text');
            const spinner = button.querySelector('.spinner-border');

            if (isProcessing) {
                button.disabled = true;
                buttonText.style.display = 'none';
                spinner.style.display = 'inline-block';
            } else {
                button.disabled = false;
                buttonText.style.display = 'inline-block';
                spinner.style.display = 'none';
            }
        };

        const switchForms = (showSignup) => {
            const formToHide = showSignup ? loginFormContainer : signupFormContainer;
            const formToShow = showSignup ? signupFormContainer : loginFormContainer;
            
            formToHide.classList.add('form-exit');
            
            setTimeout(() => {
                formToHide.classList.remove('form-exit');
                formToHide.classList.add('hidden');
            
                formToShow.classList.remove('hidden');
                formToShow.classList.add('form-enter');
                
                setTimeout(() => {
                    formToShow.classList.remove('form-enter');
                }, 300);
            
            }, 300); 
        };
        
        toggleToSignup.addEventListener('click', (e) => {
            e.preventDefault();
            authMessage.textContent = '';
            switchForms(true);
        });

        toggleToLogin.addEventListener('click', (e) => {
            e.preventDefault();
            authMessage.textContent = '';
            switchForms(false);
        });

        loginForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            setFormProcessing(loginForm, true);
            authMessage.textContent = '';

            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;

            const { error } = await supabaseClient.auth.signInWithPassword({ email, password });

            if (error) {
                authMessage.className = 'text-danger';
                authMessage.textContent = 'Email ou senha inválidos. Tente novamente.';
            }
            
            setFormProcessing(loginForm, false);
        });

        signupForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            setFormProcessing(signupForm, true);
            authMessage.textContent = '';
            
            const email = document.getElementById('signup-email').value;
            const password = document.getElementById('signup-password').value;

            const { error } = await supabaseClient.auth.signUp({ email, password });

            if (error) {
                authMessage.className = 'text-danger';
                if (error.message.includes("User already registered")) {
                    authMessage.textContent = 'Este email já está cadastrado.';
                } else if (error.message.includes("Password should be at least 6 characters")) {
                    authMessage.textContent = 'A senha precisa ter no mínimo 6 caracteres.';
                } else {
                    authMessage.textContent = 'Erro ao criar conta: ' + error.message;
                }
            } else {
                authMessage.className = 'text-success';
                authMessage.textContent = 'Conta criada com sucesso! Redirecionando...';
                setTimeout(() => {
                    switchForms(false); 
                    authMessage.textContent = '';
                    document.getElementById('email').value = email;
                    document.getElementById('password').focus();
                }, 2000);
            }
            
            setFormProcessing(signupForm, false);
        });
        
        logoutButton.addEventListener('click', async () => {
            await supabaseClient.auth.signOut();
        });

        supabaseClient.auth.onAuthStateChange((_event, session) => {
            if (session) {
                loginContainer.style.opacity = '0';
                setTimeout(() => {
                    loginContainer.style.display = 'none';
                    dashboardContent.style.display = 'block';
                }, 300);
                
                userInfoDiv.textContent = `Logado como: ${session.user.email}`;
            } else {
                dashboardContent.style.display = 'none';
                loginContainer.style.display = 'flex';
                loginContainer.style.opacity = '1';
                userInfoDiv.textContent = '';
            }
        });

    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
