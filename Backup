<!DOCTYPE html>
<html lang="pt-BR" data-bs-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard de Separação de Cargas</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    
    <style>
        /* ... (todo o seu CSS continua o mesmo) ... */
        body {
            background-color: #212529;
        }
        .card {
            background-color: #2b3035;
            border: 1px solid #495057;
        }
        .accordion-button {
            background-color: #343a40;
            color: #f8f9fa;
        }
        .accordion-button:not(.collapsed) {
            background-color: #0d6efd;
            color: white;
        }
        .accordion-body {
            background-color: #2b3035;
        }
        .table-striped>tbody>tr:nth-of-type(odd)>* {
            --bs-table-accent-bg: var(--bs-table-striped-bg);
        }
        .status-message {
            min-height: 24px; /* Prevent layout shift */
        }

        .btn-success, .btn-primary, .btn-warning {
            transition: all 0.2s ease-in-out;
        }

        .btn-success:hover, .btn-primary:hover, .btn-warning:hover {
            filter: brightness(1.1);
            transform: translateY(-2px);
        }
        @media print {
            body {
                background-color: #fff; /* White background for printing */
                color: #000; /* Black text for printing */
            }
            .container, .card, .accordion-item, .accordion-body {
                background-color: #fff !important;
                color: #000 !important;
                border: none !important;
                box-shadow: none !important;
            }
            /* Hide elements not relevant for printing */
            .no-print,
            .d-flex.align-items-center.mb-3, /* Title and truck icon */
            .card.p-3.mb-4.shadow-sm, /* Input form */
            button, /* All buttons */
            .status-message, /* Status messages */
            .card-subtitle, /* Subtitles */
            .accordion-button.collapsed, /* Collapsed accordion buttons */
            .accordion-collapse.collapse { /* Collapsed accordion content */
                display: none !important;
            }
            /* Ensure tables are visible and well-formatted */
            .table-responsive {
                overflow: visible !important;
            }
            table, th, td {
                border: 1px solid #dee2e6 !important;
                color: #000 !important;
            }
            h1, h2, h3, h4, h5 {
                color: #000 !important;
                margin-top: 1rem;
                margin-bottom: 0.5rem;
            }
            /* Ensure all accordion content is visible when printing */
            .accordion-collapse {
                display: block !important;
            }
            .accordion-button {
                display: block !important; /* Make accordion headers visible */
                background-color: #f8f9fa !important; /* Light background for headers */
                color: #000 !important;
                border: 1px solid #dee2e6 !important;
                margin-bottom: 0.5rem;
            }
            .accordion-button strong, .accordion-button .badge {
                color: #000 !important;
            }
        }
        #drop-zone-text {
            border: 2px dashed #495057;
            border-radius: .25rem;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        }
        #drop-zone.border-primary #drop-zone-text {
            border-color: #0d6efd;
        }
    </style>
</head>
<body>
    <div class="container mt-4 mb-4">
        <div class="d-flex align-items-center mb-3">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-truck me-3" viewBox="0 0 16 16"><path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h9A1.5 1.5 0 0 1 12 3.5V5h1.02a1.5 1.5 0 0 1 1.17.563l1.481 1.85a1.5 1.5 0 0 1 .329.938V10.5a1.5 1.5 0 0 1-1.5 1.5H14a2 2 0 1 1-4 0H5a2 2 0 1 1-4 0a1 1 0 0 1-1-1V3.5ZM1.5 3a.5.5 0 0 0-.5.5V11h.5a1 1 0 0 1 1 1 1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V3.5a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v.364c-.606.252-1.134.63-1.562 1.136l-1.48-1.85A.5.5 0 0 0 9.02 3H1.5Zm3 10a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm9 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z"/></svg>
            <h1 class="mb-0">Dashboard de Separação de Cargas</h1>
        </div>

        <div class="card p-3 mb-4 shadow-sm no-print" id="drop-zone">
            <div class="row g-3 align-items-center">
                <div class="col-md-4">
                    <label for="fileInput" class="form-label fw-bold">1. Arraste e solte a planilha ou clique para selecionar:</label>
                    <input class="form-control" type="file" id="fileInput" accept=".xlsx, .xls, .csv" style="display: none;">
                    <div id="drop-zone-text" class="text-center p-5 border-2 border-dashed rounded-3">
                        <p>Arraste e solte o arquivo aqui</p>
                        <button type="button" class="btn btn-secondary" onclick="document.getElementById('fileInput').click()">Selecionar Arquivo</button>
                    </div>
                </div>
                <div class="col-md-5">
                    <label class="form-label fw-bold">2. Defina a Faixa de Rotas (Opcional):</label>
                    <div class="input-group">
                        <input type="text" class="form-control" id="rotaInicialInput" placeholder="Rota Inicial">
                        <input type="text" class="form-control" id="rotaFinalInput" placeholder="Rota Final">
                    </div>
                </div>
                <div class="col-md-3 align-self-end">
                    <button class="btn btn-primary w-100" id="processarBtn" onclick="processar()" disabled>3. Processar Cargas</button>
                </div>
            </div>
            <div id="status" class="mt-2 status-message"></div>
        </div>

        <div class="card p-3 mb-4 shadow-sm no-print">
            <h2 class="card-title h5">Configurações de Veículos</h2>
            <p class="card-subtitle mb-3 text-body-secondary small">Defina as capacidades de peso e cubagem para cada tipo de veículo. Suas configurações serão salvas automaticamente.</p>
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="fiorinoMaxCapacity" class="form-label">Fiorino - Peso Máx (kg)</label>
                    <input type="number" class="form-control config-input" id="fiorinoMaxCapacity" value="570" step="10">
                </div>
                <div class="col-md-3">
                    <label for="fiorinoMinCapacity" class="form-label">Fiorino - Peso Mín (kg)</label>
                    <input type="number" class="form-control config-input" id="fiorinoMinCapacity" value="330" step="10">
                </div>
                <div class="col-md-3">
                    <label for="fiorinoCubage" class="form-label">Fiorino - Cubagem Máx (m³)</label>
                    <input type="number" class="form-control config-input" id="fiorinoCubage" value="1.5" step="0.1">
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button class="btn btn-secondary w-100" id="resetFiorino">Reset Fiorino</button>
                </div>

                <div class="col-md-3">
                    <label for="vanMaxCapacity" class="form-label">Van - Peso Máx (kg)</label>
                    <input type="number" class="form-control config-input" id="vanMaxCapacity" value="1560" step="10">
                </div>
                <div class="col-md-3">
                    <label for="vanMinCapacity" class="form-label">Van - Peso Mín (kg)</label>
                    <input type="number" class="form-control config-input" id="vanMinCapacity" value="1100" step="10">
                </div>
                <div class="col-md-3">
                    <label for="vanCubage" class="form-label">Van - Cubagem Máx (m³)</label>
                    <input type="number" class="form-control config-input" id="vanCubage" value="5.0" step="0.1">
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button class="btn btn-secondary w-100" id="resetVan">Reset Van</button>
                </div>

                <div class="col-md-3">
                    <label for="tresQuartosMaxCapacity" class="form-label">3/4 - Peso Máx (kg)</label>
                    <input type="number" class="form-control config-input" id="tresQuartosMaxCapacity" value="4100" step="10">
                </div>
                <div class="col-md-3">
                    <label for="tresQuartosMinCapacity" class="form-label">3/4 - Peso Mín (kg)</label>
                    <input type="number" class="form-control config-input" id="tresQuartosMinCapacity" value="2300" step="10">
                </div>
                <div class="col-md-3">
                    <label for="tresQuartosCubage" class="form-label">3/4 - Cubagem Máx (m³)</label>
                    <input type="number" class="form-control config-input" id="tresQuartosCubage" value="15.0" step="0.1">
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button class="btn btn-secondary w-100" id="resetTresQuartos">Reset 3/4</button>
                </div>

                <div class="col-md-3">
                    <label for="tocoMaxCapacity" class="form-label">Toco - Peso Máx (kg)</label>
                    <input type="number" class="form-control config-input" id="tocoMaxCapacity" value="8500" step="10">
                </div>
                <div class="col-md-3">
                    <label for="tocoMinCapacity" class="form-label">Toco - Peso Mín (kg)</label>
                    <input type="number" class="form-control config-input" id="tocoMinCapacity" value="5000" step="10">
                </div>
                <div class="col-md-3">
                    <label for="tocoCubage" class="form-label">Toco - Cubagem Máx (m³)</label>
                    <input type="number" class="form-control config-input" id="tocoCubage" value="30.0" step="0.1">
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button class="btn btn-secondary w-100" id="resetToco">Reset Toco</button>
                </div>
            </div>
            <div class="mt-3 d-flex justify-content-end">
                <button class="btn btn-success me-2" id="saveConfig">Salvar Configurações</button>
                <button class="btn btn-danger" id="resetAllConfigs">Resetar Todas</button>
            </div>
             <div id="configStatus" class="mt-2 status-message"></div>
        </div>

        <div class="row">
            <div class="col-lg-12 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                             <h2 class="card-title h5">Resultados Gerais</h2>
                             <button class="btn btn-sm btn-outline-light no-print" onclick="window.print()">🖨️ Imprimir Tudo</button>
                        </div>
                        <p class="card-subtitle mb-2 text-body-secondary small">Pedidos que não são 'Toco', agrupados por rota.</p>
                        <div class="input-group mb-3 no-print">
                            <input type="text" id="pedidoSearchInput" class="form-control" placeholder="Buscar por Nº do Pedido...">
                            <button class="btn btn-outline-secondary" type="button" onclick="buscarPedido()">Buscar</button>
                        </div>
                        <div id="search-result" class="mb-3"></div>
                        <div id="resultado-geral"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h2 class="card-title h5">Separação de Cargas (Fiorino)</h2>
                        <p class="card-subtitle mb-2 text-body-secondary small">Selecione uma rota de Fiorino para separar as cargas.</p>
                        
                        <div class="no-print">
                            <button class="btn btn-success mt-2" onclick="separarCargasFiorino('11101', 'resultado-fiorino-geral', 'Rota 11101')">Rota 11101</button>
                            <button class="btn btn-success mt-2" onclick="separarCargasFiorino('11301', 'resultado-fiorino-geral', 'Rota 11301')">Rota 11301</button>
                            <button class="btn btn-success mt-2" onclick="separarCargasFiorino('11311', 'resultado-fiorino-geral', 'Rota 11311')">Rota 11311</button>
                            <button class="btn btn-success mt-2" onclick="separarCargasFiorino('11561', 'resultado-fiorino-geral', 'Rota 11561')">Rota 11561</button>
                            <button class="btn btn-success mt-2" onclick="separarCargasFiorino(['11721', '11731'], 'resultado-fiorino-geral', 'Rotas 11721 & 11731')">Rotas 11721 & 11731</button>
                        </div>
                        
                        <div id="resultado-fiorino-geral" class="mt-3"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h2 class="card-title h5">Separação de Cargas (Van)</h2>
                        <p class="card-subtitle mb-2 text-body-secondary small">Selecione uma rota de Van para separar as cargas.</p>
                        <div class="no-print">
                            <button class="btn btn-primary mt-2" onclick="separarCargasVan('11102', 'resultado-van-geral', 'Rota 11102')">Rota 11102</button>
                            <button class="btn btn-primary mt-2" onclick="separarCargasVan('11331', 'resultado-van-geral', 'Rota 11331')">Rota 11331</button>
                            <button class="btn btn-primary mt-2" onclick="separarCargasVan('11341', 'resultado-van-geral', 'Rota 11341')">Rota 11341</button>
                            <button class="btn btn-primary mt-2" onclick="separarCargasVan('11342', 'resultado-van-geral', 'Rota 11342')">Rota 11342</button>
                            <button class="btn btn-primary mt-2" onclick="separarCargasVan('11351', 'resultado-van-geral', 'Rota 11351')">Rota 11351</button>
                            <button class="btn btn-primary mt-2" onclick="separarCargasVan('11521', 'resultado-van-geral', 'Rota 11521')">Rota 11521</button>
                            <button class="btn btn-primary mt-2" onclick="separarCargasVan('11531', 'resultado-van-geral', 'Rota 11531')">Rota 11531</button>
                            <button class="btn btn-primary mt-2" onclick="separarCargasVan('11551', 'resultado-van-geral', 'Rota 11551')">Rota 11551</button>
                            <button class="btn btn-primary mt-2" onclick="separarCargasVan('11571', 'resultado-van-geral', 'Rota 11571')">Rota 11571</button>
                            <button class="btn btn-primary mt-2" onclick="separarCargasVan('11701', 'resultado-van-geral', 'Rota 11701')">Rota 11701</button>
                            <button class="btn btn-primary mt-2" onclick="separarCargasVan('11711', 'resultado-van-geral', 'Rota 11711')">Rota 11711</button>
                        </div>
                        <div id="resultado-van-geral" class="mt-3"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h2 class="card-title h5">Separação de Cargas (3/4)</h2>
                        <p class="card-subtitle mb-2 text-body-secondary small">Selecione uma rota de 3/4 para separar as cargas.</p>
                        <div class="no-print">
                            <button class="btn btn-warning mt-2" onclick="separarCargas34('11361', 'resultado-34-geral', 'Rota 11361')">Rota 11361</button>
                            <button class="btn btn-warning mt-2" onclick="separarCargas34(['11501', '11502', '11511'], 'resultado-34-geral', 'Rotas 11501, 11502 & 11511')">Rotas 11501, 11502 & 11511</button>
                            <button class="btn btn-warning mt-2" onclick="separarCargas34('11541', 'resultado-34-geral', 'Rota 11541')">Rota 11541</button>
                        </div>
                        <div id="resultado-34-geral" class="mt-3"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h2 class="card-title h5">Resultados Cargas 3/4 (Automático)</h2>
                        <p class="card-subtitle mb-2 text-body-secondary small">Cargas formadas a partir de um pedido muito grande.</p>
                        <div id="resultado-tres-quartos"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h2 class="card-title h5">Resultados das Cargas "Toco"</h2>
                        <p class="card-subtitle mb-2 text-body-secondary small">Grupos de cargas onde a Coluna4/5 contém "TOCO" e o CF se repete.</p>
                        <div id="resultado-toco"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"></script>
    <script>
        // *** INÍCIO DO NOVO CÁLCULO DE DISTÂNCIA OFFLINE ***
        let CargasFiorinoFinalizadas = new Map();

        // Matriz de distâncias pré-calculadas em KM, baseada em rotas de estrada reais.
        const distanceMatrix = {
            'ROLÂNDIA': {'ARAPONGAS': 22, 'ASTORGA': 58, 'BELA VISTA DO PARAÍSO': 49, 'BOM SUCESSO': 118, 'CAMBÉ': 15, 'CENTENÁRIO DO SUL': 64, 'FAXINAL': 148, 'FLORESTÓPOLIS': 47, 'GUARACI': 80, 'IBIPORÃ': 30, 'JAGUAPITÃ': 46, 'JANDAIA DO SUL': 85, 'JATAIZINHO': 42, 'KALORÉ': 123, 'LONDRINA': 25, 'MANDAGUARI': 76, 'MARIALVA': 89, 'MARILÂNDIA DO SUL': 112, 'MUNHOZ DE MELO': 68, 'PORECATU': 82, 'PRADO FERREIRA': 44, 'PRIMEIRO DE MAIO': 70, 'SABAUDIA': 12, 'SANTA FÉ': 65, 'SANTO INÁCIO': 105, 'SERTANÓPOLIS': 46},
            'ARAPONGAS': {'ROLÂNDIA': 22, 'ASTORGA': 52, 'BELA VISTA DO PARAÍSO': 68, 'BOM SUCESSO': 96, 'CAMBÉ': 34, 'CENTENÁRIO DO SUL': 84, 'FAXINAL': 126, 'FLORESTÓPOLIS': 66, 'GUARACI': 100, 'IBIPORÃ': 49, 'JAGUAPITÃ': 66, 'JANDAIA DO SUL': 63, 'JATAIZINHO': 61, 'KALORÉ': 101, 'LONDRINA': 38, 'MANDAGUARI': 54, 'MARIALVA': 67, 'MARILÂNDIA DO SUL': 90, 'MUNHOZ DE MELO': 72, 'PORECATU': 102, 'PRADO FERREIRA': 64, 'PRIMEIRO DE MAIO': 89, 'SABAUDIA': 10, 'SANTA FÉ': 70, 'SANTO INÁCIO': 125, 'SERTANÓPOLIS': 65},
            'ASTORGA': {'ROLÂNDIA': 58, 'ARAPONGAS': 52, 'BELA VISTA DO PARAÍSO': 75, 'BOM SUCESSO': 81, 'CAMBÉ': 61, 'CENTENÁRIO DO SUL': 70, 'FAXINAL': 98, 'FLORESTÓPOLIS': 52, 'GUARACI': 86, 'IBIPORÃ': 75, 'JAGUAPITÃ': 51, 'JANDAIA DO SUL': 38, 'JATAIZINHO': 83, 'KALORÉ': 76, 'LONDRINA': 69, 'MANDAGUARI': 22, 'MARIALVA': 35, 'MARILÂNDIA DO SUL': 62, 'MUNHOZ DE MELO': 23, 'PORECATU': 88, 'PRADO FERREIRA': 49, 'PRIMEIRO DE MAIO': 95, 'SABAUDIA': 45, 'SANTA FÉ': 19, 'SANTO INÁCIO': 101, 'SERTANÓPOLIS': 76},
            'BELA VISTA DO PARAÍSO': {'ROLÂNDIA': 49, 'ARAPONGAS': 68, 'ASTORGA': 75, 'BOM SUCESSO': 167, 'CAMBÉ': 36, 'CENTENÁRIO DO SUL': 47, 'FAXINAL': 185, 'FLORESTÓPOLIS': 33, 'GUARACI': 66, 'IBIPORÃ': 44, 'JAGUAPITÃ': 61, 'JANDAIA DO SUL': 118, 'JATAIZINHO': 50, 'KALORÉ': 163, 'LONDRINA': 43, 'MANDAGUARI': 95, 'MARIALVA': 108, 'MARILÂNDIA DO SUL': 152, 'MUNHOZ DE MELO': 86, 'PORECATU': 68, 'PRADO FERREIRA': 58, 'PRIMEIRO DE MAIO': 56, 'SABAUDIA': 58, 'SANTA FÉ': 82, 'SANTO INÁCIO': 91, 'SERTANÓPOLIS': 22},
            'BOM SUCESSO': {'ROLÂNDIA': 118, 'ARAPONGAS': 96, 'ASTORGA': 81, 'BELA VISTA DO PARAÍSO': 167, 'CAMBÉ': 130, 'CENTENÁRIO DO SUL': 152, 'FAXINAL': 30, 'FLORESTÓPOLIS': 140, 'GUARACI': 188, 'IBIPORÃ': 145, 'JAGUAPITÃ': 134, 'JANDAIA DO SUL': 33, 'JATAIZINHO': 157, 'KALORÉ': 25, 'LONDRINA': 138, 'MANDAGUARI': 59, 'MARIALVA': 72, 'MARILÂNDIA DO SUL': 25, 'MUNHOZ DE MELO': 90, 'PORECATU': 170, 'PRADO FERREIRA': 132, 'PRIMEIRO DE MAIO': 176, 'SABAUDIA': 106, 'SANTA FÉ': 90, 'SANTO INÁCIO': 213, 'SERTANÓPOLIS': 158},
            'CAMBÉ': {'ROLÂNDIA': 15, 'ARAPONGAS': 34, 'ASTORGA': 61, 'BELA VISTA DO PARAÍSO': 36, 'BOM SUCESSO': 130, 'CENTENÁRIO DO SUL': 51, 'FAXINAL': 148, 'FLORESTÓPOLIS': 34, 'GUARACI': 67, 'IBIPORÃ': 17, 'JAGUAPITÃ': 49, 'JANDAIA DO SUL': 97, 'JATAIZINHO': 29, 'KALORÉ': 136, 'LONDRINA': 12, 'MANDAGUARI': 78, 'MARIALVA': 91, 'MARILÂNDIA DO SUL': 126, 'MUNHOZ DE MELO': 71, 'PORECATU': 69, 'PRADO FERREIRA': 47, 'PRIMEIRO DE MAIO': 57, 'SABAUDIA': 24, 'SANTA FÉ': 68, 'SANTO INÁCIO': 92, 'SERTANÓPOLIS': 33},
            'CENTENÁRIO DO SUL': {'ROLÂNDIA': 64, 'ARAPONGAS': 84, 'ASTORGA': 70, 'BELA VISTA DO PARAÍSO': 47, 'BOM SUCESSO': 152, 'CAMBÉ': 51, 'FAXINAL': 170, 'FLORESTÓPOLIS': 23, 'GUARACI': 39, 'IBIPORÃ': 60, 'JAGUAPITÃ': 34, 'JANDAIA DO SUL': 103, 'JATAIZINHO': 66, 'KALORÉ': 148, 'LONDRINA': 58, 'MANDAGUARI': 88, 'MARIALVA': 101, 'MARILÂNDIA DO SUL': 136, 'MUNHOZ DE MELO': 80, 'PORECATU': 41, 'PRADO FERREIRA': 31, 'PRIMEIRO DE MAIO': 70, 'SABAUDIA': 74, 'SANTA FÉ': 77, 'SANTO INÁCIO': 64, 'SERTANÓPOLIS': 40},
            'FAXINAL': {'ROLÂNDIA': 148, 'ARAPONGAS': 126, 'ASTORGA': 98, 'BELA VISTA DO PARAÍSO': 185, 'BOM SUCESSO': 30, 'CAMBÉ': 148, 'CENTENÁRIO DO SUL': 170, 'FLORESTÓPOLIS': 158, 'GUARACI': 206, 'IBIPORÃ': 163, 'JAGUAPITÃ': 152, 'JANDAIA DO SUL': 63, 'JATAIZINHO': 175, 'KALORÉ': 27, 'LONDRINA': 156, 'MANDAGUARI': 76, 'MARIALVA': 89, 'MARILÂNDIA DO SUL': 29, 'MUNHOZ DE MELO': 107, 'PORECATU': 188, 'PRADO FERREIRA': 150, 'PRIMEIRO DE MAIO': 194, 'SABAUDIA': 136, 'SANTA FÉ': 108, 'SANTO INÁCIO': 231, 'SERTANÓPOLIS': 176},
            'FLORESTÓPOLIS': {'ROLÂNDIA': 47, 'ARAPONGAS': 66, 'ASTORGA': 52, 'BELA VISTA DO PARAÍSO': 33, 'BOM SUCESSO': 140, 'CAMBÉ': 34, 'CENTENÁRIO DO SUL': 23, 'FAXINAL': 158, 'GUARACI': 46, 'IBIPORÃ': 43, 'JAGUAPITÃ': 29, 'JANDAIA DO SUL': 91, 'JATAIZINHO': 49, 'KALORÉ': 136, 'LONDRINA': 42, 'MANDAGUARI': 70, 'MARIALVA': 83, 'MARILÂNDIA DO SUL': 124, 'MUNHOZ DE MELO': 62, 'PORECATU': 48, 'PRADO FERREIRA': 17, 'PRIMEIRO DE MAIO': 56, 'SABAUDIA': 56, 'SANTA FÉ': 59, 'SANTO INÁCIO': 71, 'SERTANÓPOLIS': 26},
            'GUARACI': {'ROLÂNDIA': 80, 'ARAPONGAS': 100, 'ASTORGA': 86, 'BELA VISTA DO PARAÍSO': 66, 'BOM SUCESSO': 188, 'CAMBÉ': 67, 'CENTENÁRIO DO SUL': 39, 'FAXINAL': 206, 'FLORESTÓPOLIS': 46, 'IBIPORÃ': 76, 'JAGUAPITÃ': 50, 'JANDAIA DO SUL': 123, 'JATAIZINHO': 82, 'KALORÉ': 184, 'LONDRINA': 75, 'MANDAGUARI': 104, 'MARIALVA': 117, 'MARILÂNDIA DO SUL': 156, 'MUNHOZ DE MELO': 96, 'PORECATU': 14, 'PRADO FERREIRA': 47, 'PRIMEIRO DE MAIO': 86, 'SABAUDIA': 90, 'SANTA FÉ': 93, 'SANTO INÁCIO': 53, 'SERTANÓPOLIS': 59},
            'IBIPORÃ': {'ROLÂNDIA': 30, 'ARAPONGAS': 49, 'ASTORGA': 75, 'BELA VISTA DO PARAÍSO': 44, 'BOM SUCESSO': 145, 'CAMBÉ': 17, 'CENTENÁRIO DO SUL': 60, 'FAXINAL': 163, 'FLORESTÓPOLIS': 43, 'GUARACI': 76, 'JAGUAPITÃ': 58, 'JANDAIA DO SUL': 112, 'JATAIZINHO': 16, 'KALORÉ': 151, 'LONDRINA': 15, 'MANDAGUARI': 93, 'MARIALVA': 106, 'MARILÂNDIA DO SUL': 141, 'MUNHOZ DE MELO': 85, 'PORECATU': 78, 'PRADO FERREIRA': 56, 'PRIMEIRO DE MAIO': 66, 'SABAUDIA': 39, 'SANTA FÉ': 82, 'SANTO INÁCIO': 101, 'SERTANÓPOLIS': 42},
            'JAGUAPITÃ': {'ROLÂNDIA': 46, 'ARAPONGAS': 66, 'ASTORGA': 51, 'BELA VISTA DO PARAÍSO': 61, 'BOM SUCESSO': 134, 'CAMBÉ': 49, 'CENTENÁRIO DO SUL': 34, 'FAXINAL': 152, 'FLORESTÓPOLIS': 29, 'GUARACI': 50, 'IBIPORÃ': 58, 'JANDAIA DO SUL': 85, 'JATAIZINHO': 64, 'KALORÉ': 130, 'LONDRINA': 57, 'MANDAGUARI': 69, 'MARIALVA': 82, 'MARILÂNDIA DO SUL': 118, 'MUNHOZ DE MELO': 61, 'PORECATU': 55, 'PRADO FERREIRA': 20, 'PRIMEIRO DE MAIO': 74, 'SABAUDIA': 56, 'SANTA FÉ': 58, 'SANTO INÁCIO': 78, 'SERTANÓPOLIS': 48},
            'JANDAIA DO SUL': {'ROLÂNDIA': 85, 'ARAPONGAS': 63, 'ASTORGA': 38, 'BELA VISTA DO PARAÍSO': 118, 'BOM SUCESSO': 33, 'CAMBÉ': 97, 'CENTENÁRIO DO SUL': 103, 'FAXINAL': 63, 'FLORESTÓPOLIS': 91, 'GUARACI': 123, 'IBIPORÃ': 112, 'JAGUAPITÃ': 85, 'JATAIZINHO': 124, 'KALORÉ': 38, 'LONDRINA': 105, 'MANDAGUARI': 16, 'MARIALVA': 29, 'MARILÂNDIA DO SUL': 28, 'MUNHOZ DE MELO': 45, 'PORECATU': 129, 'PRADO FERREIRA': 83, 'PRIMEIRO DE MAIO': 135, 'SABAUDIA': 73, 'SANTA FÉ': 47, 'SANTO INÁCIO': 149, 'SERTANÓPOLIS': 116},
            'JATAIZINHO': {'ROLÂNDIA': 42, 'ARAPONGAS': 61, 'ASTORGA': 83, 'BELA VISTA DO PARAÍSO': 50, 'BOM SUCESSO': 157, 'CAMBÉ': 29, 'CENTENÁRIO DO SUL': 66, 'FAXINAL': 175, 'FLORESTÓPOLIS': 49, 'GUARACI': 82, 'IBIPORÃ': 16, 'JAGUAPITÃ': 64, 'JANDAIA DO SUL': 124, 'KALORÉ': 163, 'LONDRINA': 28, 'MANDAGUARI': 101, 'MARIALVA': 114, 'MARILÂNDIA DO SUL': 153, 'MUNHOZ DE MELO': 93, 'PORECATU': 84, 'PRADO FERREIRA': 62, 'PRIMEIRO DE MAIO': 61, 'SABAUDIA': 51, 'SANTA FÉ': 90, 'SANTO INÁCIO': 107, 'SERTANÓPOLIS': 48},
            'KALORÉ': {'ROLÂNDIA': 123, 'ARAPONGAS': 101, 'ASTORGA': 76, 'BELA VISTA DO PARAÍSO': 163, 'BOM SUCESSO': 25, 'CAMBÉ': 136, 'CENTENÁRIO DO SUL': 148, 'FAXINAL': 27, 'FLORESTÓPOLIS': 136, 'GUARACI': 184, 'IBIPORÃ': 151, 'JAGUAPITÃ': 130, 'JANDAIA DO SUL': 38, 'JATAIZINHO': 163, 'LONDRINA': 144, 'MANDAGUARI': 54, 'MARIALVA': 67, 'MARILÂNDIA DO SUL': 31, 'MUNHOZ DE MELO': 85, 'PORECATU': 166, 'PRADO FERREIRA': 128, 'PRIMEIRO DE MAIO': 172, 'SABAUDIA': 111, 'SANTA FÉ': 85, 'SANTO INÁCIO': 209, 'SERTANÓPOLIS': 154},
            'LONDRINA': {'ROLÂNDIA': 25, 'ARAPONGAS': 38, 'ASTORGA': 69, 'BELA VISTA DO PARAÍSO': 43, 'BOM SUCESSO': 138, 'CAMBÉ': 12, 'CENTENÁRIO DO SUL': 58, 'FAXINAL': 156, 'FLORESTÓPOLIS': 42, 'GUARACI': 75, 'IBIPORÃ': 15, 'JAGUAPITÃ': 57, 'JANDAIA DO SUL': 105, 'JATAIZINHO': 28, 'KALORÉ': 144, 'MANDAGUARI': 86, 'MARIALVA': 99, 'MARILÂNDIA DO SUL': 134, 'MUNHOZ DE MELO': 79, 'PORECATU': 77, 'PRADO FERREIRA': 55, 'PRIMEIRO DE MAIO': 65, 'SABAUDIA': 32, 'SANTA FÉ': 76, 'SANTO INÁCIO': 100, 'SERTANÓPOLIS': 41},
            'MANDAGUARI': {'ROLÂNDIA': 76, 'ARAPONGAS': 54, 'ASTORGA': 22, 'BELA VISTA DO PARAÍSO': 95, 'BOM SUCESSO': 59, 'CAMBÉ': 78, 'CENTENÁRIO DO SUL': 88, 'FAXINAL': 76, 'FLORESTÓPOLIS': 70, 'GUARACI': 104, 'IBIPORÃ': 93, 'JAGUAPITÃ': 69, 'JANDAIA DO SUL': 16, 'JATAIZINHO': 101, 'KALORÉ': 54, 'LONDRINA': 86, 'MARIALVA': 13, 'MARILÂNDIA DO SUL': 40, 'MUNHOZ DE MELO': 30, 'PORECATU': 106, 'PRADO FERREIRA': 67, 'PRIMEIRO DE MAIO': 113, 'SABAUDIA': 64, 'SANTA FÉ': 37, 'SANTO INÁCIO': 127, 'SERTANÓPOLIS': 94},
            'MARIALVA': {'ROLÂNDIA': 89, 'ARAPONGAS': 67, 'ASTORGA': 35, 'BELA VISTA DO PARAÍSO': 108, 'BOM SUCESSO': 72, 'CAMBÉ': 91, 'CENTENÁRIO DO SUL': 101, 'FAXINAL': 89, 'FLORESTÓPOLIS': 83, 'GUARACI': 117, 'IBIPORÃ': 106, 'JAGUAPITÃ': 82, 'JANDAIA DO SUL': 29, 'JATAIZINHO': 114, 'KALORÉ': 67, 'LONDRINA': 99, 'MANDAGUARI': 13, 'MARILÂNDIA DO SUL': 53, 'MUNHOZ DE MELO': 18, 'PORECATU': 119, 'PRADO FERREIRA': 80, 'PRIMEIRO DE MAIO': 126, 'SABAUDIA': 77, 'SANTA FÉ': 44, 'SANTO INÁCIO': 135, 'SERTANÓPOLIS': 107},
            'MARILÂNDIA DO SUL': {'ROLÂNDIA': 112, 'ARAPONGAS': 90, 'ASTORGA': 62, 'BELA VISTA DO PARAÍSO': 152, 'BOM SUCESSO': 25, 'CAMBÉ': 126, 'CENTENÁRIO DO SUL': 136, 'FAXINAL': 29, 'FLORESTÓPOLIS': 124, 'GUARACI': 156, 'IBIPORÃ': 141, 'JAGUAPITÃ': 118, 'JANDAIA DO SUL': 28, 'JATAIZINHO': 153, 'KALORÉ': 31, 'LONDRINA': 134, 'MANDAGUARI': 40, 'MARIALVA': 53, 'MUNHOZ DE MELO': 70, 'PORECATU': 152, 'PRADO FERREIRA': 114, 'PRIMEIRO DE MAIO': 160, 'SABAUDIA': 100, 'SANTA FÉ': 71, 'SANTO INÁCIO': 174, 'SERTANÓPOLIS': 144},
            'MUNHOZ DE MELO': {'ROLÂNDIA': 68, 'ARAPONGAS': 72, 'ASTORGA': 23, 'BELA VISTA DO PARAÍSO': 86, 'BOM SUCESSO': 90, 'CAMBÉ': 71, 'CENTENÁRIO DO SUL': 80, 'FAXINAL': 107, 'FLORESTÓPOLIS': 62, 'GUARACI': 96, 'IBIPORÃ': 85, 'JAGUAPITÃ': 61, 'JANDAIA DO SUL': 45, 'JATAIZINHO': 93, 'KALORÉ': 85, 'LONDRINA': 79, 'MANDAGUARI': 30, 'MARIALVA': 18, 'MARILÂNDIA DO SUL': 70, 'PORECATU': 98, 'PRADO FERREIRA': 60, 'PRIMEIRO DE MAIO': 105, 'SABAUDIA': 65, 'SANTA FÉ': 27, 'SANTO INÁCIO': 117, 'SERTANÓPOLIS': 85},
            'PORECATU': {'ROLÂNDIA': 82, 'ARAPONGAS': 102, 'ASTORGA': 88, 'BELA VISTA DO PARAÍSO': 68, 'BOM SUCESSO': 170, 'CAMBÉ': 69, 'CENTENÁRIO DO SUL': 41, 'FAXINAL': 188, 'FLORESTÓPOLIS': 48, 'GUARACI': 14, 'IBIPORÃ': 78, 'JAGUAPITÃ': 55, 'JANDAIA DO SUL': 129, 'JATAIZINHO': 84, 'KALORÉ': 166, 'LONDRINA': 77, 'MANDAGUARI': 106, 'MARIALVA': 119, 'MARILÂNDIA DO SUL': 152, 'MUNHOZ DE MELO': 98, 'PRADO FERREIRA': 52, 'PRIMEIRO DE MAIO': 88, 'SABAUDIA': 92, 'SANTA FÉ': 95, 'SANTO INÁCIO': 56, 'SERTANÓPOLIS': 61},
            'PRADO FERREIRA': {'ROLÂNDIA': 44, 'ARAPONGAS': 64, 'ASTORGA': 49, 'BELA VISTA DO PARAÍSO': 58, 'BOM SUCESSO': 132, 'CAMBÉ': 47, 'CENTENÁRIO DO SUL': 31, 'FAXINAL': 150, 'FLORESTÓPOLIS': 17, 'GUARACI': 47, 'IBIPORÃ': 56, 'JAGUAPITÃ': 20, 'JANDAIA DO SUL': 83, 'JATAIZINHO': 62, 'KALORÉ': 128, 'LONDRINA': 55, 'MANDAGUARI': 67, 'MARIALVA': 80, 'MARILÂNDIA DO SUL': 114, 'MUNHOZ DE MELO': 60, 'PORECATU': 52, 'PRIMEIRO DE MAIO': 71, 'SABAUDIA': 54, 'SANTA FÉ': 56, 'SANTO INÁCIO': 75, 'SERTANÓPOLIS': 45},
            'PRIMEIRO DE MAIO': {'ROLÂNDIA': 70, 'ARAPONGAS': 89, 'ASTORGA': 95, 'BELA VISTA DO PARAÍSO': 56, 'BOM SUCESSO': 176, 'CAMBÉ': 57, 'CENTENÁRIO DO SUL': 70, 'FAXINAL': 194, 'FLORESTÓPOLIS': 56, 'GUARACI': 86, 'IBIPORÃ': 66, 'JAGUAPITÃ': 74, 'JANDAIA DO SUL': 135, 'JATAIZINHO': 61, 'KALORÉ': 172, 'LONDRINA': 65, 'MANDAGUARI': 113, 'MARIALVA': 126, 'MARILÂNDIA DO SUL': 160, 'MUNHOZ DE MELO': 105, 'PORECATU': 88, 'PRADO FERREIRA': 71, 'SABAUDIA': 79, 'SANTA FÉ': 102, 'SANTO INÁCIO': 111, 'SERTANÓPOLIS': 42},
            'SABAUDIA': {'ROLÂNDIA': 12, 'ARAPONGAS': 10, 'ASTORGA': 45, 'BELA VISTA DO PARAÍSO': 58, 'BOM SUCESSO': 106, 'CAMBÉ': 24, 'CENTENÁRIO DO SUL': 74, 'FAXINAL': 136, 'FLORESTÓPOLIS': 56, 'GUARACI': 90, 'IBIPORÃ': 39, 'JAGUAPITÃ': 56, 'JANDAIA DO SUL': 73, 'JATAIZINHO': 51, 'KALORÉ': 111, 'LONDRINA': 32, 'MANDAGUARI': 64, 'MARIALVA': 77, 'MARILÂNDIA DO SUL': 100, 'MUNHOZ DE MELO': 65, 'PORECATU': 92, 'PRADO FERREIRA': 54, 'PRIMEIRO DE MAIO': 79, 'SANTA FÉ': 63, 'SANTO INÁCIO': 115, 'SERTANÓPOLIS': 57},
            'SANTA FÉ': {'ROLÂNDIA': 65, 'ARAPONGAS': 70, 'ASTORGA': 19, 'BELA VISTA DO PARAÍSO': 82, 'BOM SUCESSO': 90, 'CAMBÉ': 68, 'CENTENÁRIO DO SUL': 77, 'FAXINAL': 108, 'FLORESTÓPOLIS': 59, 'GUARACI': 93, 'IBIPORÃ': 82, 'JAGUAPITÃ': 58, 'JANDAIA DO SUL': 47, 'JATAIZINHO': 90, 'KALORÉ': 85, 'LONDRINA': 76, 'MANDAGUARI': 37, 'MARIALVA': 44, 'MARILÂNDIA DO SUL': 71, 'MUNHOZ DE MELO': 27, 'PORECATU': 95, 'PRADO FERREIRA': 56, 'PRIMEIRO DE MAIO': 102, 'SABAUDIA': 63, 'SANTO INÁCIO': 108, 'SERTANÓPOLIS': 83},
            'SANTO INÁCIO': {'ROLÂNDIA': 105, 'ARAPONGAS': 125, 'ASTORGA': 101, 'BELA VISTA DO PARAÍSO': 91, 'BOM SUCESSO': 213, 'CAMBÉ': 92, 'CENTENÁRIO DO SUL': 64, 'FAXINAL': 231, 'FLORESTÓPOLIS': 71, 'GUARACI': 53, 'IBIPORÃ': 101, 'JAGUAPITÃ': 78, 'JANDAIA DO SUL': 149, 'JATAIZINHO': 107, 'KALORÉ': 209, 'LONDRINA': 100, 'MANDAGUARI': 127, 'MARIALVA': 135, 'MARILÂNDIA DO SUL': 174, 'MUNHOZ DE MELO': 117, 'PORECATU': 56, 'PRADO FERREIRA': 75, 'PRIMEIRO DE MAIO': 111, 'SABAUDIA': 115, 'SANTA FÉ': 108, 'SERTANÓPOLIS': 84},
            'SERTANÓPOLIS': {'ROLÂNDIA': 46, 'ARAPONGAS': 65, 'ASTORGA': 76, 'BELA VISTA DO PARAÍSO': 22, 'BOM SUCESSO': 158, 'CAMBÉ': 33, 'CENTENÁRIO DO SUL': 40, 'FAXINAL': 176, 'FLORESTÓPOLIS': 26, 'GUARACI': 59, 'IBIPORÃ': 42, 'JAGUAPITÃ': 48, 'JANDAIA DO SUL': 116, 'JATAIZINHO': 48, 'KALORÉ': 154, 'LONDRINA': 41, 'MANDAGUARI': 94, 'MARIALVA': 107, 'MARILÂNDIA DO SUL': 144, 'MUNHOZ DE MELO': 85, 'PORECATU': 61, 'PRADO FERREIRA': 45, 'PRIMEIRO DE MAIO': 42, 'SABAUDIA': 57, 'SANTA FÉ': 83, 'SANTO INÁCIO': 84}
        };

        function calculateOfflineDistance(loadId) {
            const resultSpan = document.getElementById(`dist-${loadId}`);
            const loadData = CargasFiorinoFinalizadas.get(loadId);

            if (!loadData) {
                resultSpan.textContent = "Erro: Carga não encontrada.";
                return;
            }
             resultSpan.innerHTML = ` <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Calculando...`;

            // Pega as cidades da carga, remove duplicadas e normaliza para maiúsculas
            const uniqueCities = [...new Set(loadData.pedidos.map(p => String(p.Cidade).toUpperCase().trim()))];
            
            if (uniqueCities.length === 0) {
                resultSpan.textContent = "Nenhuma cidade para calcular.";
                return;
            }

            // Verifica se todas as cidades da carga existem na nossa matriz de distância
            const unknownCities = uniqueCities.filter(city => !distanceMatrix[city]);
            if (unknownCities.length > 0) {
                resultSpan.textContent = `Erro: Cidade desconhecida: ${unknownCities.join(', ')}`;
                return;
            }

            const startCity = 'ROLÂNDIA';
            let unvisited = [...uniqueCities];
            // Garante que a cidade de partida não esteja na lista de "a visitar" se ela já for o ponto de partida
            unvisited = unvisited.filter(c => c !== startCity);

            let currentCity = startCity;
            let totalDistance = 0;
            let route = [startCity];

            while(unvisited.length > 0) {
                let nearestCity = null;
                let minDistance = Infinity;

                // Encontra a cidade não visitada mais próxima da cidade atual
                for(const city of unvisited) {
                    // Checa a distância de A->B e B->A para garantir
                    const distance = distanceMatrix[currentCity]?.[city] ?? distanceMatrix[city]?.[currentCity] ?? Infinity;
                    if (distance < minDistance) {
                        minDistance = distance;
                        nearestCity = city;
                    }
                }
                
                if (nearestCity) {
                    totalDistance += minDistance;
                    currentCity = nearestCity;
                    route.push(currentCity);
                    unvisited = unvisited.filter(c => c !== nearestCity);
                } else {
                    // Se não encontrar uma cidade próxima, quebra o loop para evitar loop infinito
                    resultSpan.textContent = "Erro ao calcular rota completa.";
                    return; 
                }
            }

            // Adiciona a distância de volta para Rolândia
            const returnDistance = distanceMatrix[currentCity]?.[startCity] ?? 0;
            totalDistance += returnDistance;

            resultSpan.innerHTML = `<strong>Distância Aprox: ${totalDistance.toFixed(0)} km</strong>`;
        }
        // *** FIM DO CÁLCULO DE DISTÂNCIA OFFLINE ***

        let planilhaData = [];
        let pedidosGeraisAtuais = [];
        let gruposToco = {};
        let pedidosPrioritarios = [];
        let tocoPedidoIds = new Set();

        const defaultConfigs = {
            fiorinoMaxCapacity: 570, fiorinoMinCapacity: 330, fiorinoCubage: 1.5,
            vanMaxCapacity: 1560, vanMinCapacity: 1100, vanCubage: 5.0,
            tresQuartosMaxCapacity: 4100, tresQuartosMinCapacity: 2300, tresQuartosCubage: 15.0,
            tocoMaxCapacity: 8500, tocoMinCapacity: 5000, tocoCubage: 30.0
        };

        function saveConfigurations() {
            const configStatus = document.getElementById('configStatus');
            try {
                const configs = {};
                Object.keys(defaultConfigs).forEach(key => { configs[key] = document.getElementById(key).value; });
                localStorage.setItem('vehicleConfigs', JSON.stringify(configs));
                configStatus.innerHTML = '<p class="text-success">Configurações salvas com sucesso!</p>';
                setTimeout(() => { configStatus.innerHTML = ''; }, 3000);
            } catch (error) {
                configStatus.innerHTML = '<p class="text-danger">Erro ao salvar as configurações.</p>';
            }
        }

        function loadConfigurations() {
            const savedConfigs = localStorage.getItem('vehicleConfigs');
            const configs = savedConfigs ? JSON.parse(savedConfigs) : defaultConfigs;
            Object.keys(configs).forEach(key => {
                const element = document.getElementById(key);
                if (element) { element.value = configs[key]; }
            });
        }
        
        function resetFiorino() {
            document.getElementById('fiorinoMaxCapacity').value = defaultConfigs.fiorinoMaxCapacity;
            document.getElementById('fiorinoMinCapacity').value = defaultConfigs.fiorinoMinCapacity;
            document.getElementById('fiorinoCubage').value = defaultConfigs.fiorinoCubage;
            saveConfigurations();
        }
        function resetVan() {
            document.getElementById('vanMaxCapacity').value = defaultConfigs.vanMaxCapacity;
            document.getElementById('vanMinCapacity').value = defaultConfigs.vanMinCapacity;
            document.getElementById('vanCubage').value = defaultConfigs.vanCubage;
            saveConfigurations();
        }
        function resetTresQuartos() {
            document.getElementById('tresQuartosMaxCapacity').value = defaultConfigs.tresQuartosMaxCapacity;
            document.getElementById('tresQuartosMinCapacity').value = defaultConfigs.tresQuartosMinCapacity;
            document.getElementById('tresQuartosCubage').value = defaultConfigs.tresQuartosCubage;
            saveConfigurations();
        }
        function resetToco() {
            document.getElementById('tocoMaxCapacity').value = defaultConfigs.tocoMaxCapacity;
            document.getElementById('tocoMinCapacity').value = defaultConfigs.tocoMinCapacity;
            document.getElementById('tocoCubage').value = defaultConfigs.tocoCubage;
            saveConfigurations();
        }
        function resetAll() {
            Object.keys(defaultConfigs).forEach(key => { document.getElementById(key).value = defaultConfigs[key]; });
            saveConfigurations();
        }

        document.addEventListener('DOMContentLoaded', () => {
            loadConfigurations();
            document.getElementById('saveConfig').addEventListener('click', saveConfigurations);
            document.getElementById('resetFiorino').addEventListener('click', resetFiorino);
            document.getElementById('resetVan').addEventListener('click', resetVan);
            document.getElementById('resetTresQuartos').addEventListener('click', resetTresQuartos);
            document.getElementById('resetToco').addEventListener('click', resetToco);
            document.getElementById('resetAllConfigs').addEventListener('click', resetAll);
        });

        const rotaVeiculoMap = {
            '11101': 'Fiorino', '11301': 'Fiorino', '11311': 'Fiorino', '11561': 'Fiorino', '11721': 'Fiorino', '11731': 'Fiorino',
            '11102': 'Van', '11331': 'Van', '11341': 'Van', '11342': 'Van', '11351': 'Van', '11521': 'Van', '11531': 'Van', '11551': 'Van', '11571': 'Van', '11701': 'Van', '11711': 'Van',
            '11361': '3/4', '11501': '3/4', '11502': '3/4', '11511': '3/4', '11541': '3/4',
        };
        
        const fileInput = document.getElementById('fileInput');
        const processarBtn = document.getElementById('processarBtn');
        const statusDiv = document.getElementById('status');
        const dropZone = document.getElementById('drop-zone');
        const dropZoneText = document.getElementById('drop-zone-text');
        const isNumeric = (str) => str && /^\d+$/.test(String(str).trim());

        fileInput.addEventListener('change', (event) => { handleFile(event.target.files[0]); });
        dropZone.addEventListener('dragover', (event) => { event.stopPropagation(); event.preventDefault(); dropZone.classList.add('border-primary'); });
        dropZone.addEventListener('dragleave', (event) => { event.stopPropagation(); event.preventDefault(); dropZone.classList.remove('border-primary'); });
        dropZone.addEventListener('drop', (event) => { event.stopPropagation(); event.preventDefault(); dropZone.classList.remove('border-primary'); handleFile(event.dataTransfer.files[0]); });

        function handleFile(file) {
            if (!file) return;
            statusDiv.innerHTML = '<p class="text-info">Carregando planilha...</p>';
            processarBtn.disabled = true;
            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, {type: 'array'});
                    const firstSheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[firstSheetName];
                    const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
                    let headerRowIndex = -1, headers = [];
                    for (let i = 0; i < rawData.length; i++) {
                        const row = rawData[i];
                        if (row && row.includes('Cod_Rota')) { headerRowIndex = i; headers = row.map(h => String(h).trim()); break; }
                    }
                    if (headerRowIndex === -1) throw new Error("Não foi possível encontrar a linha de cabeçalho com 'Cod_Rota'.");
                    const dataRows = rawData.slice(headerRowIndex + 1);
                    planilhaData = dataRows.map(row => { const pedido = {}; headers.forEach((header, i) => { if (header) { pedido[header] = row[i] !== undefined ? row[i] : ''; } }); return pedido; });
                    statusDiv.innerHTML = `<p class="text-success">Planilha \"${file.name}\" carregada. ${planilhaData.length} linhas prontas para processar.</p>`;
                    processarBtn.disabled = false;
                    dropZoneText.innerHTML = `<p>Arquivo \"${file.name}\" carregado.</p><button type="button" class="btn btn-secondary" onclick="document.getElementById('fileInput').click()">Selecionar Outro Arquivo</button>`;
                } catch (error) {
                    statusDiv.innerHTML = `<p class="text-danger"><strong>Erro ao ler o arquivo:</strong> ${error.message}</p>`;
                    console.error(error);
                }
            };
            reader.readAsArrayBuffer(file);
        }

        function buscarPedido() {
            const searchInput = document.getElementById('pedidoSearchInput').value.trim();
            const searchResultDiv = document.getElementById('search-result');
            searchResultDiv.innerHTML = '';
            if (!searchInput) return;

            if (planilhaData.length === 0) { searchResultDiv.innerHTML = '<p class="text-warning">Por favor, carregue e processe a planilha primeiro.</p>'; return; }

            let pedidoEncontrado = null; let local = 'Não encontrado'; let accordionId = '';

            pedidoEncontrado = pedidosGeraisAtuais.find(p => String(p.Num_Pedido) === searchInput);
            if (pedidoEncontrado) { local = 'Resultados Gerais'; accordionId = 'accordionGeral'; }

            if (!pedidoEncontrado) {
                for (const cf in gruposToco) {
                    pedidoEncontrado = gruposToco[cf].pedidos.find(p => String(p.Num_Pedido) === searchInput);
                    if (pedidoEncontrado) { local = `Cargas "Toco" (CF: ${cf})`; accordionId = 'accordionToco'; break; }
                }
            }
            
            if (!pedidoEncontrado) {
                const originalPedido = planilhaData.find(p => String(p.Num_Pedido) === searchInput);
                if (originalPedido) {
                    pedidoEncontrado = originalPedido;
                    if (tocoPedidoIds.has(String(originalPedido.Num_Pedido))) { local = 'Filtrado (pertence a um grupo Toco)'; }
                    else if (isNumeric(originalPedido.CF)) { local = 'Filtrado (possui CF numérico)'; }
                    else if (['21', '23', '17'].includes(String(originalPedido.Coluna4))) { local = 'Filtrado (Coluna4 é 21, 23, ou 17)'; } 
                    else if (String(originalPedido['BLOQ.']) === 'C' || String(originalPedido['BLOQ.']) === 'V') { local = 'Filtrado (Bloqueio C ou V)'; } 
                    else { local = 'Filtrado (outro motivo, verifique filtros)'; }
                }
            }

            if (pedidoEncontrado) {
                let buttons = '';
                if (local === 'Resultados Gerais') {
                    const isPrioritized = pedidosPrioritarios.includes(String(pedidoEncontrado.Num_Pedido));
                    buttons = `<button class="btn btn-primary btn-sm" onclick="priorizarPedido('${pedidoEncontrado.Num_Pedido}')" ${isPrioritized ? 'disabled' : ''}>${isPrioritized ? 'Prioridade Marcada' : 'Marcar como Prioridade'}</button>
                               <button class="btn btn-secondary btn-sm ms-2" onclick="highlightPedido('${pedidoEncontrado.Num_Pedido}')">Destacar na Lista</button>`;
                } else if (accordionId) {
                     buttons = `<button class="btn btn-secondary btn-sm" onclick="highlightPedido('${pedidoEncontrado.Num_Pedido}')">Destacar na Lista</button>`;
                }
                searchResultDiv.innerHTML = `<div class="alert alert-info"><h5>Pedido ${searchInput} encontrado!</h5><p class="mb-1"><strong>Local:</strong> ${local}</p><p class="mb-1"><strong>Cliente:</strong> ${pedidoEncontrado.Nome_Cliente}<br><strong>Peso:</strong> ${pedidoEncontrado.Quilos_Saldo} kg</p>${buttons ? `<div class="mt-2">${buttons}</div>` : ''}</div>`;
            } else { searchResultDiv.innerHTML = '<p class="text-danger">Pedido não encontrado em nenhuma das listas.</p>'; }
        }

        function priorizarPedido(numPedido) { if (!pedidosPrioritarios.includes(numPedido)) { pedidosPrioritarios.push(numPedido); buscarPedido(); } }

        function highlightPedido(numPedido) {
            const row = document.getElementById(`pedido-${numPedido}`);
            if (row) {
                row.classList.toggle('table-info');
                if (row.classList.contains('table-info')) {
                    const collapseEl = row.closest('.accordion-collapse');
                    if (collapseEl && !collapseEl.classList.contains('show')) { bootstrap.Collapse.getOrCreateInstance(collapseEl).show(); }
                    setTimeout(() => { row.scrollIntoView({ behavior: 'smooth', block: 'center' }); }, 350);
                }
            }
        }

        function processar() {
            const resultadoGeralDiv = document.getElementById('resultado-geral');
            const resultadoTocoDiv = document.getElementById('resultado-toco');
            const resultadoTresQuartosDiv = document.getElementById('resultado-tres-quartos');
            try {
                if (planilhaData.length === 0) { statusDiv.innerHTML = '<p class="text-danger">Nenhum dado de planilha carregado.</p>'; return; }
                const rotaInicialInput = document.getElementById('rotaInicialInput').value; const rotaFinalInput = document.getElementById('rotaFinalInput').value;
                resultadoGeralDiv.innerHTML = ''; resultadoTocoDiv.innerHTML = ''; resultadoTresQuartosDiv.innerHTML = '';

                const pedidos = planilhaData.filter(p => String(p.Coluna4) != '500');

                const pedidosTocoBase = pedidos.filter(p => (p.Coluna4 && String(p.Coluna4).toUpperCase().includes('TOCO')) || (p.Coluna5 && String(p.Coluna5).toUpperCase().includes('TOCO')));
                const cfCounts = {};
                pedidosTocoBase.forEach(p => { if (p.CF && isNumeric(p.CF)) { cfCounts[p.CF] = (cfCounts[p.CF] || 0) + 1; } });
                const cfsRepetidos = Object.keys(cfCounts).filter(cf => cfCounts[cf] > 1);
                const pedidosTocoFiltrados = pedidosTocoBase.filter(p => cfsRepetidos.includes(String(p.CF)));
                gruposToco = pedidosTocoFiltrados.reduce((acc, p) => {
                    const cf = p.CF;
                    if (!acc[cf]) { acc[cf] = { pedidos: [], totalKg: 0 }; } acc[cf].pedidos.push(p); acc[cf].totalKg += parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0; return acc;
                }, {});
                displayToco(resultadoTocoDiv, gruposToco);

                tocoPedidoIds = new Set(pedidosTocoFiltrados.map(p => String(p.Num_Pedido)));
                const clientesComBloqueio = new Set(); const clientesSemBloqueio = new Set();
                pedidos.forEach(p => { if (String(p['BLOQ.']) === 'C' || String(p['BLOQ.']) === 'V') { clientesComBloqueio.add(String(p.Cliente)); } else { clientesSemBloqueio.add(String(p.Cliente)); } });
                const clientesParaRemover = new Set([...clientesComBloqueio].filter(c => clientesSemBloqueio.has(c)));
                const rotaMin = rotaInicialInput ? parseInt(rotaInicialInput, 10) : 0; const rotaMax = rotaFinalInput ? parseInt(rotaFinalInput, 10) : 99999;
                
                const pedidosGeraisFiltrados = pedidos.filter(p => {
                    if (tocoPedidoIds.has(String(p.Num_Pedido))) return false;
                    if (['21', '23', '17'].includes(String(p.Coluna4))) return false;
                    if (isNumeric(p.CF)) { return false; }
                    const rotaAtualNum = parseInt(String(p.Cod_Rota), 10);
                    if (rotaMin > 0 && rotaMax > 0 && !(rotaAtualNum >= rotaMin && rotaAtualNum <= rotaMax)) return false;
                    if (String(p['BLOQ.']) === 'C' || String(p['BLOQ.']) === 'V') return false;
                    if (clientesParaRemover.has(String(p.Cliente))) return false;
                    return true;
                });

                let tresQuartosLoads = [];
                const MIN_KG_3_4 = parseFloat(document.getElementById('tresQuartosMinCapacity').value) || defaultConfigs.tresQuartosMinCapacity;
                const MAX_KG_3_4 = parseFloat(document.getElementById('tresQuartosMaxCapacity').value) || defaultConfigs.tresQuartosMaxCapacity;
                const LARGE_ORDER_KG = 1700;

                const largeOrdersByRoute = pedidosGeraisFiltrados.reduce((acc, p) => {
                    const peso = parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0;
                    if (peso >= LARGE_ORDER_KG) { const rota = p.Cod_Rota; if (!acc[rota]) acc[rota] = []; acc[rota].push(p); } return acc;
                }, {});
                const pedidosEmCargas3_4 = new Set();
                Object.keys(largeOrdersByRoute).forEach(rota => {
                    const largeOrders = largeOrdersByRoute[rota];
                    if (largeOrders.length === 1) {
                        const largeOrder = largeOrders[0]; if (pedidosEmCargas3_4.has(largeOrder.Num_Pedido)) return;
                        let newLoad = { pedidos: [largeOrder], totalKg: parseFloat(String(largeOrder.Quilos_Saldo).replace(',', '.')) || 0, rota: rota };
                        const otherOrdersInRoute = pedidosGeraisFiltrados.filter(p => p.Cod_Rota === rota && p.Num_Pedido !== largeOrder.Num_Pedido).sort((a, b) => (parseFloat(String(b.Quilos_Saldo).replace(',', '.')) || 0) - (parseFloat(String(a.Quilos_Saldo).replace(',', '.')) || 0));
                        for (const order of otherOrdersInRoute) {
                            if (pedidosEmCargas3_4.has(order.Num_Pedido)) continue;
                            const orderKg = parseFloat(String(order.Quilos_Saldo).replace(',', '.')) || 0;
                            if (newLoad.totalKg + orderKg <= MAX_KG_3_4) { newLoad.pedidos.push(order); newLoad.totalKg += orderKg; }
                        }
                        if (newLoad.totalKg >= MIN_KG_3_4) { tresQuartosLoads.push(newLoad); newLoad.pedidos.forEach(p => pedidosEmCargas3_4.add(p.Num_Pedido)); }
                    }
                });
                tresQuartosLoads.forEach((load, index) => { load.numero = index + 1; });
                displayTresQuartos(resultadoTresQuartosDiv, tresQuartosLoads);

                pedidosGeraisAtuais = pedidosGeraisFiltrados.filter(p => !pedidosEmCargas3_4.has(p.Num_Pedido));
                
                const gruposGerais = pedidosGeraisAtuais.reduce((acc, p) => {
                    const rota = p.Cod_Rota; if (!acc[rota]) { acc[rota] = { pedidos: [], totalKg: 0 }; } acc[rota].pedidos.push(p); acc[rota].totalKg += parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0; return acc;
                }, {});
                displayGerais(resultadoGeralDiv, gruposGerais);

            } catch (error) { statusDiv.innerHTML = `<p class="text-danger"><strong>Ocorreu um erro:</strong></p><pre>${error.stack}</pre>`; console.error(error); }
        }

        function createTable(pedidos, columnsToDisplay) {
            if (!pedidos || pedidos.length === 0) return '';
            const colunasExibir = columnsToDisplay || ['Cod_Rota', 'Cliente', 'Nome_Cliente', 'Num_Pedido', 'Quilos_Saldo', 'Cubagem', 'Cidade', 'BLOQ.', 'Coluna4', 'Coluna5', 'CF'];
            let table = '<div class="table-responsive"><table class="table table-sm table-bordered table-striped"><thead><tr>';
            colunasExibir.forEach(c => table += `<th>${c}</th>`);
            table += '</tr></thead><tbody>';
            pedidos.forEach(p => { table += `<tr id="pedido-${p.Num_Pedido}">`; colunasExibir.forEach(c => table += `<td>${p[c] === undefined || p[c] === null ? '' : p[c]}</td>`); table += '</tr>'; });
            table += '</tbody></table></div>';
            return table;
        }

        function displayGerais(div, grupos) {
            if (Object.keys(grupos).length === 0) { div.innerHTML = '<div class="text-center p-3">Nenhum pedido geral encontrado.</div>'; return; }
            let accordionHtml = '<div class="accordion accordion-flush" id="accordionGeral">';
            Object.keys(grupos).sort().forEach((rota, index) => {
                const grupo = grupos[rota];
                const totalKgFormatado = grupo.totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                const veiculo = rotaVeiculoMap[rota] || 'Toco';
                accordionHtml += `<div class="accordion-item"><h2 class="accordion-header" id="headingGeral${index}"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseGeral${index}"><strong>Rota: ${rota} (${veiculo})</strong> &nbsp; <span class="badge bg-secondary ms-2">${grupo.pedidos.length} pedidos</span> <span class="badge bg-info ms-2">${totalKgFormatado} kg</span></button></h2><div id="collapseGeral${index}" class="accordion-collapse collapse" data-bs-parent="#accordionGeral"><div class="accordion-body">${createTable(grupo.pedidos)}</div></div></div>`;
            });
            accordionHtml += '</div>'; div.innerHTML = accordionHtml;
        }

        function displayTresQuartos(div, loads) {
            if (loads.length === 0) { div.innerHTML = '<div class="text-center p-3">Nenhuma carga 3/4 formada.</div>'; return; }
            let html = `<div class="d-flex justify-content-between align-items-center mb-2"><h4 class="mb-0">Cargas 3/4 (Automático):</h4>${loads.length > 0 ? `<button class="btn btn-sm btn-outline-light no-print" onclick="imprimirCargasGeneric('${div.id}', 'Cargas 3/4 (Automático)', 'bg-warning', 'text-dark')">🖨️ Imprimir Concluídas</button>` : ''}</div>`;
            loads.forEach(load => {
                const totalKgFormatado = load.totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                html += `<div class="card mb-3"><div class="card-header bg-warning text-dark">Carga 3/4 #${load.numero} (Rota: ${load.rota}) - Total: ${totalKgFormatado} kg</div><div class="card-body">${createTable(load.pedidos)}</div></div>`;
            });
            div.innerHTML = html;
        }

        function separarCargasGeneric(routeOrRoutes, divId, title, vehicleType) {
            const resultadoDiv = document.getElementById(divId);
            resultadoDiv.innerHTML = '';
            if (planilhaData.length === 0) {
                resultadoDiv.innerHTML = '<p class="text-danger">Nenhum dado de planilha carregado.</p>'; return;
            }

            const routes = Array.isArray(routeOrRoutes) ? routeOrRoutes : [routeOrRoutes];

            const MIN_KG = parseFloat(document.getElementById(`${vehicleType}MinCapacity`).value) || defaultConfigs[`${vehicleType}MinCapacity`];
            const MAX_KG = parseFloat(document.getElementById(`${vehicleType}MaxCapacity`).value) || defaultConfigs[`${vehicleType}MaxCapacity`];
            const MAX_CUBAGEM = parseFloat(document.getElementById(`${vehicleType}Cubage`).value) || defaultConfigs[`${vehicleType}Cubage`];
            
            const pedidosRota = pedidosGeraisAtuais.filter(p => routes.includes(String(p.Cod_Rota)));
            const specialClientNames = ['IRMAOS MUFFATO S.A', 'FINCO & FINCO'];
            const isSpecialClient = (p) => p.Nome_Cliente && specialClientNames.includes(p.Nome_Cliente.toUpperCase().trim());

            let packableItems = [];
            const otherPedidos = pedidosRota.filter(p => !isSpecialClient(p));
            const specialPedidos = pedidosRota.filter(p => isSpecialClient(p));

            specialPedidos.forEach(pedido => { packableItems.push({ isSpecial: true, pedidos: [pedido], totalKg: parseFloat(String(pedido.Quilos_Saldo).replace(',', '.')) || 0, totalCubagem: parseFloat(String(pedido.Cubagem).replace(',', '.')) || 0, }); });

            const otherClientGroupsMap = otherPedidos.reduce((acc, pedido) => {
                const clienteId = pedido.Cliente; if (!acc[clienteId]) { acc[clienteId] = { isSpecial: false, pedidos: [], totalKg: 0, totalCubagem: 0 }; } acc[clienteId].pedidos.push(pedido); return acc;
            }, {});
            
            Object.values(otherClientGroupsMap).forEach(group => {
                group.totalKg = group.pedidos.reduce((sum, p) => sum + (parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0), 0);
                group.totalCubagem = group.pedidos.reduce((sum, p) => sum + (parseFloat(String(p.Cubagem).replace(',', '.')) || 0), 0);
                packableItems.push(group);
            });

            const priorityItems = packableItems.filter(item => item.pedidos.some(p => pedidosPrioritarios.includes(String(p.Num_Pedido))));
            const regularItems = packableItems.filter(item => !item.pedidos.some(p => pedidosPrioritarios.includes(String(p.Num_Pedido))));
            priorityItems.sort((a, b) => b.totalKg - a.totalKg); regularItems.sort((a, b) => b.totalKg - a.totalKg);
            packableItems = [...priorityItems, ...regularItems];

            let loads = []; let leftoverItems = [];
            packableItems.forEach(item => {
                if (item.totalKg > MAX_KG || item.totalCubagem > MAX_CUBAGEM) { leftoverItems.push(item); return; }
                let placed = false;
                for (const load of loads) {
                    const specialCountInLoad = load.pedidos.filter(p => isSpecialClient(p)).length; const specialOrdersInItem = item.isSpecial ? item.pedidos.length : 0;
                    if ((load.totalKg + item.totalKg <= MAX_KG) && (load.totalCubagem + item.totalCubagem <= MAX_CUBAGEM) && (specialCountInLoad + specialOrdersInItem <= 2)) {
                        load.pedidos.push(...item.pedidos); load.totalKg += item.totalKg; load.totalCubagem += item.totalCubagem; placed = true; break;
                    }
                }
                if (!placed) { loads.push({ pedidos: [...item.pedidos], totalKg: item.totalKg, totalCubagem: item.totalCubagem, }); }
            });

            let finalLoads = []; let unplacedFromMinRule = [];
            loads.forEach(load => {
                const hasPriority = load.pedidos.some(p => pedidosPrioritarios.includes(String(p.Num_Pedido)));
                if (hasPriority || load.totalKg >= MIN_KG) { finalLoads.push(load); } else { unplacedFromMinRule.push(...load.pedidos); }
            });
            finalLoads.forEach((load, index) => { load.numero = index + 1; });
            
            if (vehicleType === 'fiorino') {
                CargasFiorinoFinalizadas.clear();
                finalLoads.forEach(load => {
                    const loadId = `fiorino-${title.replace(/\s+/g, '-')}-${load.numero}`;
                    load.id = loadId;
                    CargasFiorinoFinalizadas.set(loadId, load);
                });
            }

            let leftoverPedidos = leftoverItems.flatMap(item => item.pedidos).concat(unplacedFromMinRule);
            
            const vehicleInfo = {
                fiorino: { name: 'Fiorino', colorClass: 'bg-success', textColor: 'text-white' },
                van: { name: 'Van', colorClass: 'bg-primary', textColor: 'text-white' },
                tresQuartos: { name: '3/4', colorClass: 'bg-warning', textColor: 'text-dark' }
            };
            const vInfo = vehicleInfo[vehicleType];

            let html = `<div class="d-flex justify-content-between align-items-center mb-2"><h4 class="mb-0">${finalLoads.length} Carga(s) de ${vInfo.name} para ${title}:</h4>${finalLoads.length > 0 ? `<button class="btn btn-sm btn-outline-light no-print" onclick="imprimirCargasGeneric('${divId}', 'Cargas de ${vInfo.name} - ${title}', '${vInfo.colorClass}', '${vInfo.textColor}')">🖨️ Imprimir Concluídas</button>` : ''}</div>`;
            if (finalLoads.length === 0) { html += `<p>Nenhuma carga de ${vInfo.name} foi formada.</p>`; }
            
            finalLoads.forEach(load => {
                const totalKgFormatado = load.totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                const totalCubagemFormatado = load.totalCubagem.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                const isPriorityLoad = load.pedidos.some(p => pedidosPrioritarios.includes(String(p.Num_Pedido)));
                const priorityBadge = isPriorityLoad ? '<span class="badge bg-light text-dark ms-3">PRIORIDADE</span>' : '';
                
                // *** MODIFICADO: O botão agora chama a função OFFLINE ***
                let fiorinoDistanceHtml = '';
                if (vehicleType === 'fiorino') {
                    fiorinoDistanceHtml = `
                        <div class="d-flex justify-content-between align-items-center mt-2 pt-2 border-top border-secondary">
                           <span id="dist-${load.id}"></span>
                           <button class="btn btn-outline-info btn-sm no-print" onclick="calculateOfflineDistance('${load.id}')">📍 Calcular KM</button>
                        </div>`;
                }

                html += `
                    <div class="card mb-3 ${isPriorityLoad ? 'border-primary' : ''}">
                        <div class="card-header ${vInfo.colorClass} ${vInfo.textColor}">
                            ${vInfo.name} #${load.numero} - Total: ${totalKgFormatado} kg / ${totalCubagemFormatado} m³ ${priorityBadge}
                        </div>
                        <div class="card-body">
                            ${createTable(load.pedidos)}
                            ${fiorinoDistanceHtml}
                        </div>
                    </div>`;
            });
            if (leftoverPedidos.length > 0) {
                const totalKgUnassigned = leftoverPedidos.reduce((sum, p) => sum + (parseFloat(String(p.Quilos_Saldo).replace(',', '.')) || 0), 0);
                html += `<h5 class="mt-4">Pedidos restantes: ${totalKgUnassigned.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} kg</h5><div class="card mb-3"><div class="card-header bg-danger text-white">Detalhes dos Pedidos Restantes</div><div class="card-body">${createTable(leftoverPedidos, ['Num_Pedido', 'Quilos_Saldo', 'Cubagem', 'Cliente', 'Nome_Cliente', 'Cidade'])}</div></div>`;
            }
            resultadoDiv.innerHTML = html;
        }

        function separarCargasFiorino(routes, divId, title) { separarCargasGeneric(routes, divId, title, 'fiorino'); }
        function separarCargasVan(routes, divId, title) { separarCargasGeneric(routes, divId, title, 'van'); }
        function separarCargas34(routes, divId, title) { separarCargasGeneric(routes, divId, title, 'tresQuartos'); }

        function displayToco(div, grupos) {
            if (Object.keys(grupos).length === 0) { div.innerHTML = '<div class="text-center p-3">Nenhuma carga toco encontrada.</div>'; return; }
            const MAX_KG_TOCO = parseFloat(document.getElementById('tocoMaxCapacity').value) || defaultConfigs.tocoMaxCapacity;
            
            let accordionHtml = '<div class="accordion accordion-flush" id="accordionToco">';
            Object.keys(grupos).sort().forEach((cf, index) => {
                const grupo = grupos[cf]; const pedidos = grupo.pedidos;
                const totalKgFormatado = grupo.totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                const overWeight = grupo.totalKg > MAX_KG_TOCO;
                const weightBadge = overWeight
                    ? `<span class="badge bg-danger ms-2">${totalKgFormatado} kg (ACIMA DO PESO!)</span>`
                    : `<span class="badge bg-info ms-2">${totalKgFormatado} kg</span>`;
                
                accordionHtml += `<div class="accordion-item"><h2 class="accordion-header" id="headingToco${index}"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseToco${index}"><strong>CF: ${cf}</strong> &nbsp; <span class="badge bg-secondary ms-2">${pedidos.length} pedidos</span> ${weightBadge}</button></h2><div id="collapseToco${index}" class="accordion-collapse collapse" data-bs-parent="#accordionToco"><div class="accordion-body"><button class="btn btn-sm btn-outline-info mb-3 no-print" onclick="imprimirTocoIndividual('${cf}')">🖨️ Imprimir esta Carga Toco</button>${createTable(pedidos)}</div></div></div>`;
            });
            accordionHtml += '</div>'; div.innerHTML = accordionHtml;
        }

        function imprimirCargasGeneric(divId, title, headerBgClass, headerTextClass) {
            const divToPrint = document.getElementById(divId);
            if (!divToPrint) return;

            const completedLoadsCards = divToPrint.querySelectorAll(`.card-header.${headerBgClass}`);
            if (completedLoadsCards.length === 0) {
                alert("Nenhuma carga concluída para imprimir."); return;
            }

            const printWindow = window.open('', '', 'height=800,width=1200');
            printWindow.document.write('<html><head><title>Imprimir: ' + title + '</title>');
            printWindow.document.write('<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">');
            printWindow.document.write(`<style>
                body { margin: 20px; -webkit-print-color-adjust: exact; print-color-adjust: exact; }
                .card { break-inside: avoid; margin-bottom: 1rem; page-break-inside: avoid; }
                .no-print { display: none !important; }
                .${headerBgClass} { background-color: ${getComputedStyle(document.querySelector(`.${headerBgClass}`)).backgroundColor} !important; }
                .${headerTextClass} { color: ${getComputedStyle(document.querySelector(`.${headerTextClass}`)).color} !important; }
                .table-responsive { overflow: visible !important; }
                table, th, td { border: 1px solid #dee2e6 !important; }
                h1, h2, h3, h4, h5 { margin-top: 1rem; margin-bottom: 0.5rem; }
            </style></head><body>`);
            
            let contentToPrint = `<h3>${title}</h3>`;
            completedLoadsCards.forEach(header => { contentToPrint += header.closest('.card.mb-3').outerHTML; });

            printWindow.document.body.innerHTML = contentToPrint;
            printWindow.document.close();
            printWindow.focus(); 
            setTimeout(() => { printWindow.print(); printWindow.close(); }, 500);
        }

        function imprimirTocoIndividual(cf) {
            if (!gruposToco[cf]) { alert(`Nenhuma carga Toco encontrada para o CF: ${cf}`); return; }
            const grupo = gruposToco[cf]; const pedidos = grupo.pedidos;
            const totalKgFormatado = grupo.totalKg.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            const printWindow = window.open('', '', 'height=800,width=1200');
            printWindow.document.write('<html><head><title>Imprimir Carga Toco CF: ' + cf + '</title>');
            printWindow.document.write('<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">');
            printWindow.document.write(`<style>
                body { margin: 20px; }
                .table-responsive { overflow: visible !important; }
                table, th, td { border: 1px solid #dee2e6 !important; }
                h3 { margin-bottom: 1rem; }
            </style></head><body>`);
            
            let contentToPrint = `<h3>Carga Toco CF: ${cf} - Total: ${totalKgFormatado} kg</h3>` + createTable(pedidos);

            printWindow.document.body.innerHTML = contentToPrint;
            printWindow.document.close();
            printWindow.focus(); 
            setTimeout(() => { printWindow.print(); printWindow.close(); }, 500);
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
Sim esse é o código certo, agora quero que adicione Rolândia na lista de cidades e que corrija pois tem cidades que não estão na planilha que eu utilizo para usar no sistema, e o resultado final da distância esta dando errado pois não esta batendo com a realidade , veja aí e me envie o código final com todas as alterações, pois preciso dele funcionando perfeitamente 
E lembre se o ponto de partida é Rolândia e tem que voltar pra Rolândia
